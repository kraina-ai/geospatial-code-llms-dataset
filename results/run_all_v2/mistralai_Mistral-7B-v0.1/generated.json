{"1.1_prompt": "import geopandas as gpd\n\ndef mean_area(polygons: gpd.GeoDataFrame) -> float:\n    \"\"\"Calculate mean area of the polygons in a geodataframe\"\"\"", "1.1_generated": "import geopandas as gpd\n\ndef mean_area(polygons: gpd.GeoDataFrame) -> float:\n    \"\"\"Calculate mean area of the polygons in a geodataframe\"\"\"\n    return polygons.area.mean()\n\ndef mean_area_per_country(polygons: gpd.GeoDataFrame) -> dict:\n    \"\"\"Calculate mean area of the polygons in a geodataframe per country\"\"\"\n    return polygons.groupby('country').area.mean()\n\ndef mean_area_per_country_and_region(polygons: gpd.GeoDataFrame) -> dict:\n    \"\"\"Calculate mean area of the polygons in a geodataframe per country and region\"\"\"\n    return polygons.groupby(['country', 'region']).area.mean()\n\ndef mean_area_per_country_and_region_and_subregion(polygons: gpd.GeoDataFrame) -> dict:\n    \"\"\"Calculate mean area of the polygons in a geodataframe", "1.1_sanitized": "import geopandas as gpd\n\ndef mean_area(polygons: gpd.GeoDataFrame) -> float:\n    \"\"\"Calculate mean area of the polygons in a geodataframe\"\"\"\n    return polygons.area.mean()\n", "1.2_prompt": "def mean_area(filename: str) -> float:\n    \"\"\"Calculate mean area of the polygons in a shapefile\"\"\"", "1.2_generated": "def mean_area(filename: str) -> float:\n    \"\"\"Calculate mean area of the polygons in a shapefile\"\"\"\n    import os\n    import shapefile\n    import math\n\n    # Open the shapefile\n    shp = shapefile.Reader(filename)\n\n    # Calculate the mean area\n    area = 0\n    for shape in shp.shapes():\n        area += shape.area\n    mean_area = area / shp.numRecords\n\n    return mean_area\n\n\ndef main():\n    \"\"\"Main function\"\"\"\n    filename = input(\"Enter the filename: \")\n    mean_area(filename)\n\n\nif __name__ == \"__main__\":\n    main()", "1.2_sanitized": "def mean_area(filename: str) -> float:\n    \"\"\"Calculate mean area of the polygons in a shapefile\"\"\"\n    import os\n    import shapefile\n    import math\n\n    # Open the shapefile\n    shp = shapefile.Reader(filename)\n\n    # Calculate the mean area\n    area = 0\n    for shape in shp.shapes():\n        area += shape.area\n    mean_area = area / shp.numRecords\n\n    return mean_area\n\n", "1.3_prompt": "def mean_area(filename: str) -> float:\n    \"\"\"Calculate mean area of the polygons in a geojson file\"\"\"", "1.3_generated": "def mean_area(filename: str) -> float:\n    \"\"\"Calculate mean area of the polygons in a geojson file\"\"\"\n    import json\n    import os\n    import sys\n    import math\n\n    with open(filename, 'r') as f:\n        data = json.load(f)\n\n    area = 0\n    for feature in data['features']:\n        for geometry in feature['geometry']:\n            if geometry['type'] == 'Polygon':\n                area += math.fabs(geometry['area'])\n\n    return area\n\n\nif __name__ == '__main__':\n    import argparse\n\n    parser = argparse.ArgumentParser(description='Calculate mean area of the polygons in a geojson file')\n    parser.add_argument('filename', help='geojson file')\n    args = parser.parse_args()\n\n    print(mean_area(args.filename))", "1.3_sanitized": "def mean_area(filename: str) -> float:\n    \"\"\"Calculate mean area of the polygons in a geojson file\"\"\"\n    import json\n    import os\n    import sys\n    import math\n\n    with open(filename, 'r') as f:\n        data = json.load(f)\n\n    area = 0\n    for feature in data['features']:\n        for geometry in feature['geometry']:\n            if geometry['type'] == 'Polygon':\n                area += math.fabs(geometry['area'])\n", "1.4_prompt": "import geopandas as gpd\n\ndef buildings_area(building_gdf: gpd.GeoDataFrame) -> float:\n    \"\"\"Calculate mean area of the buildings in a geodataframe\"\"\"", "1.4_generated": "import geopandas as gpd\n\ndef buildings_area(building_gdf: gpd.GeoDataFrame) -> float:\n    \"\"\"Calculate mean area of the buildings in a geodataframe\"\"\"\n    return building_gdf.geometry.area.mean()\n\ndef buildings_perimeter(building_gdf: gpd.GeoDataFrame) -> float:\n    \"\"\"Calculate mean perimeter of the buildings in a geodataframe\"\"\"\n    return building_gdf.geometry.length.mean()\n\ndef buildings_area_per_person(building_gdf: gpd.GeoDataFrame,\n                               population_gdf: gpd.GeoDataFrame) -> float:\n    \"\"\"Calculate mean area of the buildings in a geodataframe per person\"\"\"\n    return buildings_area(building_gdf) / population_gdf.area.sum()\n\ndef buildings_perimeter_per_person(building_gdf: gpd.GeoDataFrame,\n                                    population_gdf: gpd.GeoDataFrame) -> float:\n", "1.4_sanitized": "import geopandas as gpd\n\ndef buildings_area(building_gdf: gpd.GeoDataFrame) -> float:\n    \"\"\"Calculate mean area of the buildings in a geodataframe\"\"\"\n    return building_gdf.geometry.area.mean()\n", "1.5_prompt": "def buildings_area(building_file: str) -> float:\n    \"\"\"Calculate mean area of the buildings in a shapefile\"\"\"", "1.5_generated": "def buildings_area(building_file: str) -> float:\n    \"\"\"Calculate mean area of the buildings in a shapefile\"\"\"\n    import fiona\n    import shapely.geometry\n    import math\n    with fiona.open(building_file) as buildings:\n        total_area = 0\n        for building in buildings:\n            geometry = shapely.geometry.shape(building['geometry'])\n            total_area += geometry.area\n    return total_area\n\n\ndef main():\n    \"\"\"Main function\"\"\"\n    print(buildings_area('buildings.shp'))\n\n\nif __name__ == '__main__':\n    main()", "1.5_sanitized": "def buildings_area(building_file: str) -> float:\n    \"\"\"Calculate mean area of the buildings in a shapefile\"\"\"\n    import fiona\n    import shapely.geometry\n    import math\n    with fiona.open(building_file) as buildings:\n        total_area = 0\n        for building in buildings:\n            geometry = shapely.geometry.shape(building['geometry'])\n            total_area += geometry.area\n    return total_area\n\n", "1.6_prompt": "def buildings_area(building_file: str) -> float:\n    \"\"\"Calculate mean area of the buildings in a geojson file\"\"\"", "1.6_generated": "def buildings_area(building_file: str) -> float:\n    \"\"\"Calculate mean area of the buildings in a geojson file\"\"\"\n    import json\n    import os\n    import sys\n    import math\n    import geojson\n    import shapely.geometry\n    import shapely.ops\n    import shapely.affinity\n    import shapely.prepared\n    import shapely.speedups\n    import shapely.wkt\n    import shapely.wkb\n    import shapely.ops\n    import shapely.prepared\n    import shapely.speedups\n    import shapely.wkt\n    import shapely.wkb\n    import shapely.ops\n    import shapely.prepared\n    import shapely.speedups\n    import shapely.wkt\n    import shapely.wkb\n    import shapely.ops\n    import shapely.prepared\n    import shapely.speedups\n    import", "1.6_sanitized": "", "2.1_prompt": "import geopandas as gpd\n\ndef mean_intersection_area(first: gpd.GeoDataFrame, second: gpd.GeoDataFrame) -> float:\n    \"\"\"Calculate the mean intersection ratio of polygons. Both arguments are geodataframes.\"\"\"", "2.1_generated": "import geopandas as gpd\n\ndef mean_intersection_area(first: gpd.GeoDataFrame, second: gpd.GeoDataFrame) -> float:\n    \"\"\"Calculate the mean intersection ratio of polygons. Both arguments are geodataframes.\"\"\"\n    first_area = first.total_area\n    second_area = second.total_area\n    intersection = first.intersection(second).total_area\n    return intersection / (first_area + second_area - intersection)\n\n\ndef mean_intersection_area_with_buffer(first: gpd.GeoDataFrame, second: gpd.GeoDataFrame, buffer: float) -> float:\n    \"\"\"Calculate the mean intersection ratio of polygons. Both arguments are geodataframes.\"\"\"\n    first_area = first.total_area\n    second_area = second.total_area\n    intersection = first.buffer(buffer).intersection(second.buffer(buffer)).total_area\n    return intersection / (first_area + second_area - intersection)", "2.1_sanitized": "import geopandas as gpd\n\ndef mean_intersection_area(first: gpd.GeoDataFrame, second: gpd.GeoDataFrame) -> float:\n    \"\"\"Calculate the mean intersection ratio of polygons. Both arguments are geodataframes.\"\"\"\n    first_area = first.total_area\n    second_area = second.total_area\n    intersection = first.intersection(second).total_area\n    return intersection / (first_area + second_area - intersection)\n\n", "2.2_prompt": "def mean_intersection_area(first_filename: str, second_filename: str) -> float:\n    \"\"\"Calculate the mean intersection ratio of polygons. Both arguments are shapefiles.\"\"\"", "2.2_generated": "def mean_intersection_area(first_filename: str, second_filename: str) -> float:\n    \"\"\"Calculate the mean intersection ratio of polygons. Both arguments are shapefiles.\"\"\"\n    import os\n    import shapefile\n    import numpy as np\n\n    first_shp = shapefile.Reader(first_filename)\n    second_shp = shapefile.Reader(second_filename)\n\n    first_shp_records = first_shp.records()\n    second_shp_records = second_shp.records()\n\n    first_shp_records_len = len(first_shp_records)\n    second_shp_records_len = len(second_shp_records)\n\n    first_shp_records_len_minus_one = first_shp_records_len - 1\n    second_shp_records_len_minus_one = second_shp_records_len - 1\n\n    first_shp_records_len_minus_two = first_sh", "2.2_sanitized": "", "2.3_prompt": "def mean_intersection_area(first_filename: str, second_filename: str) -> float:\n    \"\"\"Calculate the mean intersection ratio of polygons. Both arguments are geojson files.\"\"\"", "2.3_generated": "def mean_intersection_area(first_filename: str, second_filename: str) -> float:\n    \"\"\"Calculate the mean intersection ratio of polygons. Both arguments are geojson files.\"\"\"\n    import json\n    import geojson\n    import shapely.geometry\n    import shapely.ops\n\n    with open(first_filename, 'r') as f:\n        first_geojson = json.load(f)\n\n    with open(second_filename, 'r') as f:\n        second_geojson = json.load(f)\n\n    first_polygons = [\n        shapely.geometry.shape(polygon)\n        for polygon in first_geojson['features']\n    ]\n\n    second_polygons = [\n        shapely.geometry.shape(polygon)\n        for polygon in second_geojson['features']\n    ]\n\n    first_polygons = [\n        polygon\n        for polygon in first_polygons\n        if polygon.geom_type == 'Pol", "2.3_sanitized": "", "2.4_prompt": "import geopandas as gpd\n\ndef building_to_parcel_ratio(buildings_gdf: gpd.GeoDataFrame, parcels_gdf: gpd.GeoDataFrame) -> float:\n    \"\"\"Calculate the mean ratio of the buliding area compared to the parcel it stands on. Buildings and parcels are in separate geodataframes.\"\"\"", "2.4_generated": "import geopandas as gpd\n\ndef building_to_parcel_ratio(buildings_gdf: gpd.GeoDataFrame, parcels_gdf: gpd.GeoDataFrame) -> float:\n    \"\"\"Calculate the mean ratio of the buliding area compared to the parcel it stands on. Buildings and parcels are in separate geodataframes.\"\"\"\n    # Calculate the area of each building\n    buildings_area = buildings_gdf.area\n\n    # Calculate the area of each parcel\n    parcels_area = parcels_gdf.area\n\n    # Calculate the ratio of the building area to the parcel area\n    building_to_parcel_ratio = buildings_area / parcels_area\n\n    # Calculate the mean of the ratios\n    mean_building_to_parcel_ratio = building_to_parcel_ratio.mean()\n\n    return mean_building_to_parcel_ratio", "2.4_sanitized": "import geopandas as gpd\n\ndef building_to_parcel_ratio(buildings_gdf: gpd.GeoDataFrame, parcels_gdf: gpd.GeoDataFrame) -> float:\n    \"\"\"Calculate the mean ratio of the buliding area compared to the parcel it stands on. Buildings and parcels are in separate geodataframes.\"\"\"\n    # Calculate the area of each building\n    buildings_area = buildings_gdf.area\n\n    # Calculate the area of each parcel\n    parcels_area = parcels_gdf.area\n\n    # Calculate the ratio of the building area to the parcel area\n    building_to_parcel_ratio = buildings_area / parcels_area\n\n    # Calculate the mean of the ratios\n    mean_building_to_parcel_ratio = building_to_parcel_ratio.mean()\n", "2.5_prompt": "def building_to_parcel_ratio(buildings_file: str, parcels_file: str) -> float:\n    \"\"\"Calculate the mean ratio of the buliding area compared to the parcel it stands on. Buildings and parcels are in separate shapefiles.\"\"\"", "2.5_generated": "def building_to_parcel_ratio(buildings_file: str, parcels_file: str) -> float:\n    \"\"\"Calculate the mean ratio of the buliding area compared to the parcel it stands on. Buildings and parcels are in separate shapefiles.\"\"\"\n    import fiona\n    import pandas as pd\n    import geopandas as gpd\n    import numpy as np\n\n    # Read buildings and parcels\n    buildings = gpd.read_file(buildings_file)\n    parcels = gpd.read_file(parcels_file)\n\n    # Calculate the ratio of the building area compared to the parcel area\n    ratio = buildings.geometry.area / parcels.geometry.area\n\n    # Calculate the mean ratio\n    mean_ratio = np.mean(ratio)\n\n    return mean_ratio\n\n\ndef main():\n    # Example usage\n    buildings_file = \"buildings.shp\"\n    parcels_file = \"parcels.shp\"\n    mean_ratio = building_to_parcel_ratio(buildings_file, parcels_file)\n    print", "2.5_sanitized": "def building_to_parcel_ratio(buildings_file: str, parcels_file: str) -> float:\n    \"\"\"Calculate the mean ratio of the buliding area compared to the parcel it stands on. Buildings and parcels are in separate shapefiles.\"\"\"\n    import fiona\n    import pandas as pd\n    import geopandas as gpd\n    import numpy as np\n\n    # Read buildings and parcels\n    buildings = gpd.read_file(buildings_file)\n    parcels = gpd.read_file(parcels_file)\n\n    # Calculate the ratio of the building area compared to the parcel area\n    ratio = buildings.geometry.area / parcels.geometry.area\n\n    # Calculate the mean ratio\n    mean_ratio = np.mean(ratio)\n\n    return mean_ratio\n\n", "2.6_prompt": "def building_to_parcel_ratio(buildings_file: str, parcels_file: str) -> float:\n    \"\"\"Calculate the mean ratio of the buliding area compared to the parcel it stands on. Buildings and parcels are in separate geojson files.\"\"\"", "2.6_generated": "def building_to_parcel_ratio(buildings_file: str, parcels_file: str) -> float:\n    \"\"\"Calculate the mean ratio of the buliding area compared to the parcel it stands on. Buildings and parcels are in separate geojson files.\"\"\"\n    import geopandas as gpd\n    import pandas as pd\n    import numpy as np\n    import math\n\n    # Read in the buildings and parcels\n    buildings = gpd.read_file(buildings_file)\n    parcels = gpd.read_file(parcels_file)\n\n    # Calculate the area of each building\n    buildings['area'] = buildings.geometry.area\n\n    # Calculate the area of each parcel\n    parcels['area'] = parcels.geometry.area\n\n    # Calculate the ratio of the building area to the parcel area\n    buildings['ratio'] = buildings['area'] / parcels['area']\n\n    # Calculate the mean ratio\n    mean_ratio = buildings['ratio'].mean()\n\n    return mean_ratio\n\n\ndef building_to_parcel_ratio_by_parcel", "2.6_sanitized": "def building_to_parcel_ratio(buildings_file: str, parcels_file: str) -> float:\n    \"\"\"Calculate the mean ratio of the buliding area compared to the parcel it stands on. Buildings and parcels are in separate geojson files.\"\"\"\n    import geopandas as gpd\n    import pandas as pd\n    import numpy as np\n    import math\n\n    # Read in the buildings and parcels\n    buildings = gpd.read_file(buildings_file)\n    parcels = gpd.read_file(parcels_file)\n\n    # Calculate the area of each building\n    buildings['area'] = buildings.geometry.area\n\n    # Calculate the area of each parcel\n    parcels['area'] = parcels.geometry.area\n\n    # Calculate the ratio of the building area to the parcel area\n    buildings['ratio'] = buildings['area'] / parcels['area']\n\n    # Calculate the mean ratio\n    mean_ratio = buildings['ratio'].mean()\n", "3.1_prompt": "import geopandas as gpd\n\ndef points_in_polygons(points_gdf: gpd.GeoDataFrame, polygons_gdf: gpd.GeoDataFrame) -> int:\n    \"\"\"Calculate the number of points that are inside polygons. Points and polygons are stored in GeoDataFrames.\"\"\"", "3.1_generated": "import geopandas as gpd\n\ndef points_in_polygons(points_gdf: gpd.GeoDataFrame, polygons_gdf: gpd.GeoDataFrame) -> int:\n    \"\"\"Calculate the number of points that are inside polygons. Points and polygons are stored in GeoDataFrames.\"\"\"\n    return len(points_gdf.sjoin(polygons_gdf, how='inner', op='within'))\n\n\ndef points_in_polygons_with_buffer(points_gdf: gpd.GeoDataFrame, polygons_gdf: gpd.GeoDataFrame, buffer: float) -> int:\n    \"\"\"Calculate the number of points that are inside polygons. Points and polygons are stored in GeoDataFrames.\n    The polygons are buffered by the given buffer.\n    \"\"\"\n    return len(points_gdf.sjoin(polygons_gdf.buffer(buffer), how='inner', op='within'))", "3.1_sanitized": "import geopandas as gpd\n\ndef points_in_polygons(points_gdf: gpd.GeoDataFrame, polygons_gdf: gpd.GeoDataFrame) -> int:\n    \"\"\"Calculate the number of points that are inside polygons. Points and polygons are stored in GeoDataFrames.\"\"\"\n    return len(points_gdf.sjoin(polygons_gdf, how='inner', op='within'))\n\n", "3.2_prompt": "def points_in_polygons(points: str, polygons: str) -> int:\n    \"\"\"Calculate the number of points that are inside polygons. Points and polygons are stored in shapefiles.\"\"\"", "3.2_generated": "def points_in_polygons(points: str, polygons: str) -> int:\n    \"\"\"Calculate the number of points that are inside polygons. Points and polygons are stored in shapefiles.\"\"\"\n    import fiona\n    import shapely.geometry\n    import shapely.wkt\n    import shapely.ops\n\n    with fiona.open(points) as points_file:\n        with fiona.open(polygons) as polygons_file:\n            points_geometry = [shapely.wkt.loads(feature[\"geometry\"]) for feature in points_file]\n            polygons_geometry = [shapely.wkt.loads(feature[\"geometry\"]) for feature in polygons_file]\n            points_geometry = shapely.ops.cascaded_union(points_geometry)\n            polygons_geometry = shapely.ops.cascaded_union(polygons_geometry)\n            return len(shapely.ops.cascaded_union(\n                [shapely.ops.casc", "3.2_sanitized": "def points_in_polygons(points: str, polygons: str) -> int:\n    \"\"\"Calculate the number of points that are inside polygons. Points and polygons are stored in shapefiles.\"\"\"\n    import fiona\n    import shapely.geometry\n    import shapely.wkt\n    import shapely.ops\n\n    with fiona.open(points) as points_file:\n        with fiona.open(polygons) as polygons_file:\n            points_geometry = [shapely.wkt.loads(feature[\"geometry\"]) for feature in points_file]\n            polygons_geometry = [shapely.wkt.loads(feature[\"geometry\"]) for feature in polygons_file]\n            points_geometry = shapely.ops.cascaded_union(points_geometry)\n            polygons_geometry = shapely.ops.cascaded_union(polygons_geometry)\n            return len(shapely.ops.cascaded_union(", "3.3_prompt": "def points_in_polygons(points: str, polygons: str) -> int:\n    \"\"\"Calculate the number of points that are inside polygons. Points and polygons are stored in geojson files.\"\"\"", "3.3_generated": "def points_in_polygons(points: str, polygons: str) -> int:\n    \"\"\"Calculate the number of points that are inside polygons. Points and polygons are stored in geojson files.\"\"\"\n    import geojson\n    import json\n    import shapely.geometry\n    import shapely.wkt\n    import shapely.ops\n\n    # Load the points and polygons from the geojson files\n    with open(points, 'r') as f:\n        points_geojson = json.load(f)\n    with open(polygons, 'r') as f:\n        polygons_geojson = json.load(f)\n\n    # Convert the points and polygons to shapely geometries\n    points_geometries = [shapely.geometry.Point(point['geometry']['coordinates']) for point in points_geojson['features']]\n    polygons_geometries = [shapely.geometry.Polygon(polygon['geometry']['coordinates']) for polygon in polygons_geojson['", "3.3_sanitized": "", "3.4_prompt": "import geopandas as gpd\ndef mean_stations_count(bus_stops: gpd.GeoDataFrames, districts: gpd.GeoDataFrames) -> float:\n    \"\"\"Calculate the mean number of bus stops in a districs. Stations and districts are stored in GeoDataFrames.\"\"\"", "3.4_generated": "import geopandas as gpd\ndef mean_stations_count(bus_stops: gpd.GeoDataFrames, districts: gpd.GeoDataFrames) -> float:\n    \"\"\"Calculate the mean number of bus stops in a districs. Stations and districts are stored in GeoDataFrames.\"\"\"\n    return bus_stops.groupby('district')['id'].count().mean()\n\ndef mean_stations_count_by_district(bus_stops: gpd.GeoDataFrames, districts: gpd.GeoDataFrames) -> dict:\n    \"\"\"Calculate the mean number of bus stops in a districs. Stations and districts are stored in GeoDataFrames.\"\"\"\n    return bus_stops.groupby('district')['id'].count().to_dict()\n\ndef mean_stations_count_by_district_and_type(bus_stops: gpd.GeoDataFrames, districts: gpd.GeoDataFrames) -> dict:\n    \"\"\"Calculate the mean number of bus stops in a districs. Stations and districts are stored in GeoDataFrames.\"\"\"\n    return bus_stops.", "3.4_sanitized": "import geopandas as gpd\ndef mean_stations_count(bus_stops: gpd.GeoDataFrames, districts: gpd.GeoDataFrames) -> float:\n    \"\"\"Calculate the mean number of bus stops in a districs. Stations and districts are stored in GeoDataFrames.\"\"\"\n    return bus_stops.groupby('district')['id'].count().mean()\n", "3.5_prompt": "def mean_stations_count(bus_stops: str, districts: str) -> float:\n    \"\"\"Calculate the mean number of bus stops in a districs. Stations and districts are stored in shapefiles.\"\"\"", "3.5_generated": "def mean_stations_count(bus_stops: str, districts: str) -> float:\n    \"\"\"Calculate the mean number of bus stops in a districs. Stations and districts are stored in shapefiles.\"\"\"\n    import pandas as pd\n    import geopandas as gpd\n    import numpy as np\n\n    # Read shapefiles\n    bus_stops = gpd.read_file(bus_stops)\n    districts = gpd.read_file(districts)\n\n    # Calculate the mean number of bus stops in a district\n    mean_stations_count = bus_stops.groupby('district')['id'].count().mean()\n\n    return mean_stations_count\n\n\nif __name__ == '__main__':\n    # Example usage\n    bus_stops = 'bus_stops.shp'\n    districts = 'districts.shp'\n    mean_stations_count = mean_stations_count(bus_stops, districts)\n    print(f'The mean number of bus stops in", "3.5_sanitized": "def mean_stations_count(bus_stops: str, districts: str) -> float:\n    \"\"\"Calculate the mean number of bus stops in a districs. Stations and districts are stored in shapefiles.\"\"\"\n    import pandas as pd\n    import geopandas as gpd\n    import numpy as np\n\n    # Read shapefiles\n    bus_stops = gpd.read_file(bus_stops)\n    districts = gpd.read_file(districts)\n\n    # Calculate the mean number of bus stops in a district\n    mean_stations_count = bus_stops.groupby('district')['id'].count().mean()\n", "3.6_prompt": "def mean_stations_count(bus_stops: str, districts: str) -> float:\n    \"\"\"Calculate the mean number of bus stops in a districs. Stations and districts are stored in geojson files.\"\"\"", "3.6_generated": "def mean_stations_count(bus_stops: str, districts: str) -> float:\n    \"\"\"Calculate the mean number of bus stops in a districs. Stations and districts are stored in geojson files.\"\"\"\n    import json\n    import os\n    import pandas as pd\n    import geopandas as gpd\n    import numpy as np\n\n    # Load the bus stops and districts data\n    bus_stops_path = os.path.join(os.path.dirname(__file__), 'bus_stops.geojson')\n    districts_path = os.path.join(os.path.dirname(__file__), 'districts.geojson')\n\n    with open(bus_stops_path, 'r') as f:\n        bus_stops_data = json.load(f)\n\n    with open(districts_path, 'r') as f:\n        districts_data = json.load(f)\n\n    # Convert the data to pandas dataframes\n    bus_stops_df = pd.DataFrame(bus_stops_data", "3.6_sanitized": "", "4.1_prompt": "import geopandas as gpd\n\ndef is_point_present(x: float, y: float, points: gpd.GeoDataFrame) -> bool:\n    \"\"\"Check if a point is present in a list of points stored in a geojson file.\"\"\"", "4.1_generated": "import geopandas as gpd\n\ndef is_point_present(x: float, y: float, points: gpd.GeoDataFrame) -> bool:\n    \"\"\"Check if a point is present in a list of points stored in a geojson file.\"\"\"\n    return (\n        (x, y) in\n        points.geometry.apply(lambda x: (x.x, x.y))\n    )\n\n\ndef get_point_index(x: float, y: float, points: gpd.GeoDataFrame) -> int:\n    \"\"\"Get the index of a point in a list of points stored in a geojson file.\"\"\"\n    return (\n        points.geometry.apply(lambda x: (x.x, x.y)).index(\n            (x, y)\n        )\n    )", "4.1_sanitized": "import geopandas as gpd\n\ndef is_point_present(x: float, y: float, points: gpd.GeoDataFrame) -> bool:\n    \"\"\"Check if a point is present in a list of points stored in a geojson file.\"\"\"\n    return (\n        (x, y) in\n        points.geometry.apply(lambda x: (x.x, x.y))\n    )\n\n", "4.2_prompt": "import geopandas as gpd\n\ndef is_point_present(x: float, y: float, filename: str) -> bool:\n    \"\"\"Check if a point is present in a list of points stored in a shapefile.\"\"\"", "4.2_generated": "import geopandas as gpd\n\ndef is_point_present(x: float, y: float, filename: str) -> bool:\n    \"\"\"Check if a point is present in a list of points stored in a shapefile.\"\"\"\n    df = gpd.read_file(filename)\n    return (df.geometry.x.values == x).any() and (df.geometry.y.values == y).any()\n\n\ndef get_point_index(x: float, y: float, filename: str) -> int:\n    \"\"\"Get the index of a point in a list of points stored in a shapefile.\"\"\"\n    df = gpd.read_file(filename)\n    return df.geometry.x.values == x and df.geometry.y.values == y\n\n\ndef get_point_index_from_point(point: gpd.geoseries.GeoSeries, filename: str) -> int:\n    \"\"\"Get the index of a point in a list of points stored in a shapefile.\"\"\"\n    df = gpd.read_file(filename)\n    return df.geometry", "4.2_sanitized": "import geopandas as gpd\n\ndef is_point_present(x: float, y: float, filename: str) -> bool:\n    \"\"\"Check if a point is present in a list of points stored in a shapefile.\"\"\"\n    df = gpd.read_file(filename)\n    return (df.geometry.x.values == x).any() and (df.geometry.y.values == y).any()\n\n", "4.3_prompt": "import geopandas as gpd\n\ndef is_point_present(x: float, y: float, filename: str) -> bool:\n    \"\"\"Check if a point is present in a list of points stored in a geojson file.\"\"\"", "4.3_generated": "import geopandas as gpd\n\ndef is_point_present(x: float, y: float, filename: str) -> bool:\n    \"\"\"Check if a point is present in a list of points stored in a geojson file.\"\"\"\n    gdf = gpd.read_file(filename)\n    return (x, y) in gdf.geometry.values\n\n\ndef get_point_index(x: float, y: float, filename: str) -> int:\n    \"\"\"Get the index of a point in a list of points stored in a geojson file.\"\"\"\n    gdf = gpd.read_file(filename)\n    return gdf.geometry.values.index((x, y))", "4.3_sanitized": "import geopandas as gpd\n\ndef is_point_present(x: float, y: float, filename: str) -> bool:\n    \"\"\"Check if a point is present in a list of points stored in a geojson file.\"\"\"\n    gdf = gpd.read_file(filename)\n    return (x, y) in gdf.geometry.values\n\n", "4.4_prompt": "import geopandas as gpd\n\ndef is_station(lat: float, lon: float, stations: gpd.GeoDataFrame) -> bool:\n    \"\"\"Check if given coordinates represent a bus station stored in a geodataframe.\"\"\"", "4.4_generated": "import geopandas as gpd\n\ndef is_station(lat: float, lon: float, stations: gpd.GeoDataFrame) -> bool:\n    \"\"\"Check if given coordinates represent a bus station stored in a geodataframe.\"\"\"\n    return (\n        (stations.geometry.x.values > lon - 0.0001) &\n        (stations.geometry.x.values < lon + 0.0001) &\n        (stations.geometry.y.values > lat - 0.0001) &\n        (stations.geometry.y.values < lat + 0.0001)\n    )", "4.4_sanitized": "import geopandas as gpd\n\ndef is_station(lat: float, lon: float, stations: gpd.GeoDataFrame) -> bool:\n    \"\"\"Check if given coordinates represent a bus station stored in a geodataframe.\"\"\"\n    return (\n        (stations.geometry.x.values > lon - 0.0001) &\n        (stations.geometry.x.values < lon + 0.0001) &\n        (stations.geometry.y.values > lat - 0.0001) &\n        (stations.geometry.y.values < lat + 0.0001)", "4.5_prompt": "import geopandas as gpd\n\ndef is_station(lat: float, lon: float, stations: str) -> bool:\n    \"\"\"Check if given coordinates represent a bus station stored in a shapefile.\"\"\"", "4.5_generated": "import geopandas as gpd\n\ndef is_station(lat: float, lon: float, stations: str) -> bool:\n    \"\"\"Check if given coordinates represent a bus station stored in a shapefile.\"\"\"\n    stations = gpd.read_file(stations)\n    return (lat, lon) in stations.geometry.values\n\n\ndef is_station_in_radius(lat: float, lon: float, stations: str, radius: float) -> bool:\n    \"\"\"Check if given coordinates represent a bus station stored in a shapefile.\"\"\"\n    stations = gpd.read_file(stations)\n    return (lat, lon) in stations.geometry.values or \\\n        (lat, lon) in stations.geometry.values.buffer(radius).values", "4.5_sanitized": "import geopandas as gpd\n\ndef is_station(lat: float, lon: float, stations: str) -> bool:\n    \"\"\"Check if given coordinates represent a bus station stored in a shapefile.\"\"\"\n    stations = gpd.read_file(stations)\n    return (lat, lon) in stations.geometry.values\n\n", "4.6_prompt": "import geopandas as gpd\n\ndef is_station(lat: float, lon: float, stations: str) -> bool:\n    \"\"\"Check if given coordinates represent a bus station stored in a geojson file.\"\"\"", "4.6_generated": "import geopandas as gpd\n\ndef is_station(lat: float, lon: float, stations: str) -> bool:\n    \"\"\"Check if given coordinates represent a bus station stored in a geojson file.\"\"\"\n    stations_gdf = gpd.read_file(stations)\n    return (\n        (lat >= stations_gdf.geometry.total_bounds[0] and\n         lat <= stations_gdf.geometry.total_bounds[2]) and\n        (lon >= stations_gdf.geometry.total_bounds[1] and\n         lon <= stations_gdf.geometry.total_bounds[3])\n    )", "4.6_sanitized": "import geopandas as gpd\n\ndef is_station(lat: float, lon: float, stations: str) -> bool:\n    \"\"\"Check if given coordinates represent a bus station stored in a geojson file.\"\"\"\n    stations_gdf = gpd.read_file(stations)\n    return (\n        (lat >= stations_gdf.geometry.total_bounds[0] and\n         lat <= stations_gdf.geometry.total_bounds[2]) and\n        (lon >= stations_gdf.geometry.total_bounds[1] and\n         lon <= stations_gdf.geometry.total_bounds[3])", "5_prompt": "import shapely\n\ndef construct_point(x: float, y: float) -> shapely.geometry.Point:\n    \"\"\"Construct a point from x and y coordinates.\"\"\"", "5_generated": "import shapely\n\ndef construct_point(x: float, y: float) -> shapely.geometry.Point:\n    \"\"\"Construct a point from x and y coordinates.\"\"\"\n    return shapely.geometry.Point(x, y)\n\n\ndef construct_line_string(points: list[shapely.geometry.Point]) -> shapely.geometry.LineString:\n    \"\"\"Construct a line string from a list of points.\"\"\"\n    return shapely.geometry.LineString(points)\n\n\ndef construct_polygon(points: list[shapely.geometry.Point]) -> shapely.geometry.Polygon:\n    \"\"\"Construct a polygon from a list of points.\"\"\"\n    return shapely.geometry.Polygon(points)\n\n\ndef construct_multi_polygon(polygons: list[shapely.geometry.Polygon]) -> shapely.geometry.MultiPolygon:\n    \"\"\"Construct a multi polygon from a list of polygons.\"\"\"\n    return shapely.geometry.MultiPolygon(polyg", "5_sanitized": "import shapely\n\ndef construct_point(x: float, y: float) -> shapely.geometry.Point:\n    \"\"\"Construct a point from x and y coordinates.\"\"\"\n    return shapely.geometry.Point(x, y)\n\n", "6.1_prompt": "import shapely\n\ndef is_point_within_polygon(point: shapely.geometry.Point, polygon: shapely.geometry.Polygon) -> bool:\n    \"\"\"Check if a given point lies within a polygon.\"\"\"", "6.1_generated": "import shapely\n\ndef is_point_within_polygon(point: shapely.geometry.Point, polygon: shapely.geometry.Polygon) -> bool:\n    \"\"\"Check if a given point lies within a polygon.\"\"\"\n    return polygon.contains(point)\n\ndef is_point_within_polygon_with_tolerance(point: shapely.geometry.Point, polygon: shapely.geometry.Polygon, tolerance: float) -> bool:\n    \"\"\"Check if a given point lies within a polygon with a given tolerance.\"\"\"\n    return polygon.contains(point, tolerance=tolerance)\n\ndef is_point_within_polygon_with_tolerance_and_buffer(point: shapely.geometry.Point, polygon: shapely.geometry.Polygon, tolerance: float, buffer: float) -> bool:\n    \"\"\"Check if a given point lies within a polygon with a given tolerance and buffer.\"\"\"\n    return polygon.buffer(buffer).contains(point, tolerance=tolerance)\n\ndef is_point_within_polygon", "6.1_sanitized": "import shapely\n\ndef is_point_within_polygon(point: shapely.geometry.Point, polygon: shapely.geometry.Polygon) -> bool:\n    \"\"\"Check if a given point lies within a polygon.\"\"\"\n    return polygon.contains(point)\n", "6.2_prompt": "import shapely\n\ndef is_in_the_city(place: shapely.geometry.Point, city: shapely.geometry.Polygon) -> bool:\n    \"\"\"Check if a given place lies inside the city boundaries.\"\"\"", "6.2_generated": "import shapely\n\ndef is_in_the_city(place: shapely.geometry.Point, city: shapely.geometry.Polygon) -> bool:\n    \"\"\"Check if a given place lies inside the city boundaries.\"\"\"\n    return place.within(city)\n\n\ndef is_in_the_city_boundaries(place: shapely.geometry.Point, city: shapely.geometry.Polygon) -> bool:\n    \"\"\"Check if a given place lies inside the city boundaries.\"\"\"\n    return place.within(city.buffer(0.000001))", "6.2_sanitized": "import shapely\n\ndef is_in_the_city(place: shapely.geometry.Point, city: shapely.geometry.Polygon) -> bool:\n    \"\"\"Check if a given place lies inside the city boundaries.\"\"\"\n    return place.within(city)\n\n", "7.1_prompt": "import shapely\n\ndef are_polygons_adjacent(polygon1: shapely.geometry.Polygon, polygon2: shapely.geometry.Polygon) -> bool:\n    \"\"\"Check if two polygons are adjacent.\"\"\"", "7.1_generated": "import shapely\n\ndef are_polygons_adjacent(polygon1: shapely.geometry.Polygon, polygon2: shapely.geometry.Polygon) -> bool:\n    \"\"\"Check if two polygons are adjacent.\"\"\"\n    return polygon1.intersects(polygon2) and polygon1.intersection(polygon2).is_empty\n\n\ndef are_polygons_overlapping(polygon1: shapely.geometry.Polygon, polygon2: shapely.geometry.Polygon) -> bool:\n    \"\"\"Check if two polygons are overlapping.\"\"\"\n    return polygon1.intersects(polygon2) and not polygon1.intersection(polygon2).is_empty\n\n\ndef are_polygons_disjoint(polygon1: shapely.geometry.Polygon, polygon2: shapely.geometry.Polygon) -> bool:\n    \"\"\"Check if two polygons are disjoint.\"\"\"\n    return not polygon1.intersects(polygon2)", "7.1_sanitized": "import shapely\n\ndef are_polygons_adjacent(polygon1: shapely.geometry.Polygon, polygon2: shapely.geometry.Polygon) -> bool:\n    \"\"\"Check if two polygons are adjacent.\"\"\"\n    return polygon1.intersects(polygon2) and polygon1.intersection(polygon2).is_empty\n\n", "7.2_prompt": "import shapely\n\ndef are_countries_neighbours(country1: shapely.geometry.Polygon, country2: shapely.geometry.Polygon) -> bool:\n    \"\"\"Check if two polygons are adjacent.\"\"\"", "7.2_generated": "import shapely\n\ndef are_countries_neighbours(country1: shapely.geometry.Polygon, country2: shapely.geometry.Polygon) -> bool:\n    \"\"\"Check if two polygons are adjacent.\"\"\"\n    return country1.touches(country2) or country1.intersects(country2)\n\n\ndef get_neighbours(country: shapely.geometry.Polygon) -> list[shapely.geometry.Polygon]:\n    \"\"\"Get all neighbours of a country.\"\"\"\n    neighbours = []\n    for country2 in countries:\n        if are_countries_neighbours(country, country2):\n            neighbours.append(country2)\n    return neighbours\n\n\ndef get_neighbours_count(country: shapely.geometry.Polygon) -> int:\n    \"\"\"Get the number of neighbours of a country.\"\"\"\n    return len(get_neighbours(country))\n\n\ndef get_neighbours_counts(countries: list[shapely.geometry.Polygon]) -> list", "7.2_sanitized": "import shapely\n\ndef are_countries_neighbours(country1: shapely.geometry.Polygon, country2: shapely.geometry.Polygon) -> bool:\n    \"\"\"Check if two polygons are adjacent.\"\"\"\n    return country1.touches(country2) or country1.intersects(country2)\n\n", "8.1_prompt": "import shapely\n\ndef polygons_intersection(polygon1: shapely.geometry.Polygon, polygon2: shapely.geometry.Polygon) -> float:\n    \"\"\"Calculate the area of two polygons intersection.\"\"\"", "8.1_generated": "import shapely\n\ndef polygons_intersection(polygon1: shapely.geometry.Polygon, polygon2: shapely.geometry.Polygon) -> float:\n    \"\"\"Calculate the area of two polygons intersection.\"\"\"\n    intersection = polygon1.intersection(polygon2)\n    return intersection.area\n\n\ndef polygons_union(polygon1: shapely.geometry.Polygon, polygon2: shapely.geometry.Polygon) -> float:\n    \"\"\"Calculate the area of two polygons union.\"\"\"\n    union = polygon1.union(polygon2)\n    return union.area\n\n\ndef polygons_difference(polygon1: shapely.geometry.Polygon, polygon2: shapely.geometry.Polygon) -> float:\n    \"\"\"Calculate the area of two polygons difference.\"\"\"\n    difference = polygon1.difference(polygon2)\n    return difference.area\n\n\ndef polygons_symmetric_difference(polygon1: shapely.geometry.Polygon, polygon2:", "8.1_sanitized": "import shapely\n\ndef polygons_intersection(polygon1: shapely.geometry.Polygon, polygon2: shapely.geometry.Polygon) -> float:\n    \"\"\"Calculate the area of two polygons intersection.\"\"\"\n    intersection = polygon1.intersection(polygon2)\n    return intersection.area\n\n", "8.2_prompt": "import shapely\n\ndef forest_area(city: shapely.geometry.Polygon, forset: shapely.geometry.Polygon) -> float:\n    \"\"\"Calculate how much of the forest is inside the city.\"\"\"", "8.2_generated": "import shapely\n\ndef forest_area(city: shapely.geometry.Polygon, forset: shapely.geometry.Polygon) -> float:\n    \"\"\"Calculate how much of the forest is inside the city.\"\"\"\n    return forset.intersection(city).area\n\n\ndef forest_area_in_city(city: shapely.geometry.Polygon, forset: shapely.geometry.Polygon) -> float:\n    \"\"\"Calculate how much of the forest is inside the city.\"\"\"\n    return forset.intersection(city).area\n\n\ndef forest_area_in_city_with_buffer(city: shapely.geometry.Polygon, forset: shapely.geometry.Polygon, buffer: float) -> float:\n    \"\"\"Calculate how much of the forest is inside the city.\"\"\"\n    return forset.intersection(city.buffer(buffer)).area\n\n\ndef forest_area_in_city_with_buffer_and_buffer_in_city(city: shapely.geometry.Polygon, forset: shapely.geometry.Polygon", "8.2_sanitized": "import shapely\n\ndef forest_area(city: shapely.geometry.Polygon, forset: shapely.geometry.Polygon) -> float:\n    \"\"\"Calculate how much of the forest is inside the city.\"\"\"\n    return forset.intersection(city).area\n\n", "9.1_prompt": "import h3\n\ndef lat_lon_to_h3(lat: float, lon: float, resolution: int) -> str:\n    \"\"\"Convert a lat lon pair to an h3 cell.\"\"\"", "9.1_generated": "import h3\n\ndef lat_lon_to_h3(lat: float, lon: float, resolution: int) -> str:\n    \"\"\"Convert a lat lon pair to an h3 cell.\"\"\"\n    return h3.geo_to_h3(lat, lon, resolution)\n\n\ndef h3_to_lat_lon(h3_cell: str, resolution: int) -> tuple[float, float]:\n    \"\"\"Convert an h3 cell to a lat lon pair.\"\"\"\n    return h3.h3_to_geo(h3_cell, resolution)", "9.1_sanitized": "import h3\n\ndef lat_lon_to_h3(lat: float, lon: float, resolution: int) -> str:\n    \"\"\"Convert a lat lon pair to an h3 cell.\"\"\"\n    return h3.geo_to_h3(lat, lon, resolution)\n\n", "9.2_prompt": "import h3\nimport shapely\n\ndef point_to_h3(point: shapely.geometry.Point, resolution: int) -> str:\n    \"\"\"Convert a point to an h3 cell.\"\"\"", "9.2_generated": "import h3\nimport shapely\n\ndef point_to_h3(point: shapely.geometry.Point, resolution: int) -> str:\n    \"\"\"Convert a point to an h3 cell.\"\"\"\n    return h3.geo_to_h3(point.coords[0], resolution)\n\ndef h3_to_point(h3_cell: str, resolution: int) -> shapely.geometry.Point:\n    \"\"\"Convert an h3 cell to a point.\"\"\"\n    return shapely.geometry.Point(h3.h3_to_geo(h3_cell, resolution))\n\ndef h3_to_point_list(h3_cells: list, resolution: int) -> list:\n    \"\"\"Convert a list of h3 cells to a list of points.\"\"\"\n    return [h3_to_point(h3_cell, resolution) for h3_cell in h3_cells]\n\ndef h3_to_point_list_from_geo_list(geo_list: list, resolution: int) -> list:\n    \"\"\"Convert", "9.2_sanitized": "import h3\nimport shapely\n\ndef point_to_h3(point: shapely.geometry.Point, resolution: int) -> str:\n    \"\"\"Convert a point to an h3 cell.\"\"\"\n    return h3.geo_to_h3(point.coords[0], resolution)\n", "10_prompt": "import h3\nimport shapely\n\ndef h3_to_polygon(h3_cell: str) -> shapely.geometry.Polygon:\n    \"\"\"Convert an h3 cell to a polygon.\"\"\"", "10_generated": "import h3\nimport shapely\n\ndef h3_to_polygon(h3_cell: str) -> shapely.geometry.Polygon:\n    \"\"\"Convert an h3 cell to a polygon.\"\"\"\n    h3_cell = h3.encode(h3_cell)\n    return shapely.geometry.Polygon(h3.decode(h3_cell))\n\ndef polygon_to_h3(polygon: shapely.geometry.Polygon) -> str:\n    \"\"\"Convert a polygon to an h3 cell.\"\"\"\n    return h3.encode(h3.decode(polygon))", "10_sanitized": "import h3\nimport shapely\n\ndef h3_to_polygon(h3_cell: str) -> shapely.geometry.Polygon:\n    \"\"\"Convert an h3 cell to a polygon.\"\"\"\n    h3_cell = h3.encode(h3_cell)\n    return shapely.geometry.Polygon(h3.decode(h3_cell))\n", "11_prompt": "import h3\n\ndef count_h3_cells_within_polygon(polygon: shapely.geometry.Polygon, resolution: int) -> int:\n    \"\"\"Count the number of h3 cells that are within a polygon.\"\"\"", "11_generated": "import h3\n\ndef count_h3_cells_within_polygon(polygon: shapely.geometry.Polygon, resolution: int) -> int:\n    \"\"\"Count the number of h3 cells that are within a polygon.\"\"\"\n    h3_cells = h3.h3_to_cells(polygon, resolution)\n    return len(h3_cells)\n\ndef count_h3_cells_within_polygon_and_neighbors(polygon: shapely.geometry.Polygon, resolution: int) -> int:\n    \"\"\"Count the number of h3 cells that are within a polygon and its neighbors.\"\"\"\n    h3_cells = h3.h3_to_cells(polygon, resolution)\n    return len(h3_cells)\n\ndef count_h3_cells_within_polygon_and_neighbors_and_neighbors(polygon: shapely.geometry.Polygon, resolution: int) -> int:\n    \"\"\"Count the number of h3 cells that are within a polygon and", "11_sanitized": "import h3\n\ndef count_h3_cells_within_polygon(polygon: shapely.geometry.Polygon, resolution: int) -> int:\n    \"\"\"Count the number of h3 cells that are within a polygon.\"\"\"\n    h3_cells = h3.h3_to_cells(polygon, resolution)\n    return len(h3_cells)\n", "12.1.1_prompt": "import geopandas as gpd\n\ndef check_point(lat: float, lon: float, name: str, polygons: gpd.GeoDataFrame) -> bool:\n    \"\"\"Check if a point is in the polygon with the given name. The polygons GeoDataFrame contains the polygons boundaries and names in the `name` column.\"\"\"", "12.1.1_generated": "import geopandas as gpd\n\ndef check_point(lat: float, lon: float, name: str, polygons: gpd.GeoDataFrame) -> bool:\n    \"\"\"Check if a point is in the polygon with the given name. The polygons GeoDataFrame contains the polygons boundaries and names in the `name` column.\"\"\"\n    return polygons.sindex.contains(lat, lon)\n\n\ndef check_point_in_polygon(lat: float, lon: float, polygons: gpd.GeoDataFrame) -> str:\n    \"\"\"Check if a point is in the polygon with the given name. The polygons GeoDataFrame contains the polygons boundaries and names in the `name` column.\"\"\"\n    for name, polygon in polygons.iterrows():\n        if polygon.contains(lat, lon):\n            return name\n    return None", "12.1.1_sanitized": "import geopandas as gpd\n\ndef check_point(lat: float, lon: float, name: str, polygons: gpd.GeoDataFrame) -> bool:\n    \"\"\"Check if a point is in the polygon with the given name. The polygons GeoDataFrame contains the polygons boundaries and names in the `name` column.\"\"\"\n    return polygons.sindex.contains(lat, lon)\n\n", "12.1.2_prompt": "def check_point(lat: float, lon: float, name: str, polygons: str) -> bool:\n    \"\"\"Check if a point is in the polygon with the given name. The polygons is the path to the shapefile with polygons boundaries with `name` feature.\"\"\"", "12.1.2_generated": "def check_point(lat: float, lon: float, name: str, polygons: str) -> bool:\n    \"\"\"Check if a point is in the polygon with the given name. The polygons is the path to the shapefile with polygons boundaries with `name` feature.\"\"\"\n    import fiona\n    from shapely.geometry import Point, Polygon\n    from shapely.wkt import loads\n\n    with fiona.open(polygons) as f:\n        for feature in f:\n            if feature['properties']['name'] == name:\n                polygon = loads(feature['geometry'])\n                point = Point(lon, lat)\n                return polygon.contains(point)\n\n    return False", "12.1.2_sanitized": "def check_point(lat: float, lon: float, name: str, polygons: str) -> bool:\n    \"\"\"Check if a point is in the polygon with the given name. The polygons is the path to the shapefile with polygons boundaries with `name` feature.\"\"\"\n    import fiona\n    from shapely.geometry import Point, Polygon\n    from shapely.wkt import loads\n\n    with fiona.open(polygons) as f:\n        for feature in f:\n            if feature['properties']['name'] == name:\n                polygon = loads(feature['geometry'])\n                point = Point(lon, lat)\n                return polygon.contains(point)\n", "12.1.3_prompt": "def check_point(lat: float, lon: float, name: str, polygons: str) -> bool:\n    \"\"\"Check if a point is in the polygon with the given name. The polygons is the path to the geojson with polygons boundaries with `name` feature.\"\"\"", "12.1.3_generated": "def check_point(lat: float, lon: float, name: str, polygons: str) -> bool:\n    \"\"\"Check if a point is in the polygon with the given name. The polygons is the path to the geojson with polygons boundaries with `name` feature.\"\"\"\n    import json\n    import geojson\n    import shapely.geometry\n    from shapely.geometry import Point\n    from shapely.geometry import Polygon\n    from shapely.geometry import MultiPolygon\n    from shapely.geometry import shape\n    from shapely.ops import cascaded_union\n\n    with open(polygons) as f:\n        polygons = json.load(f)\n\n    for feature in polygons['features']:\n        if feature['properties']['name'] == name:\n            polygon = shape(feature['geometry'])\n            if isinstance(polygon, MultiPolygon):\n                polygon = cascaded_union(polygon)\n            if isinstance(polygon, Polygon):\n                point = Point(lon, lat)\n                return point.within(polygon)\n\n   ", "12.1.3_sanitized": "def check_point(lat: float, lon: float, name: str, polygons: str) -> bool:\n    \"\"\"Check if a point is in the polygon with the given name. The polygons is the path to the geojson with polygons boundaries with `name` feature.\"\"\"\n    import json\n    import geojson\n    import shapely.geometry\n    from shapely.geometry import Point\n    from shapely.geometry import Polygon\n    from shapely.geometry import MultiPolygon\n    from shapely.geometry import shape\n    from shapely.ops import cascaded_union\n\n    with open(polygons) as f:\n        polygons = json.load(f)\n\n    for feature in polygons['features']:\n        if feature['properties']['name'] == name:\n            polygon = shape(feature['geometry'])\n            if isinstance(polygon, MultiPolygon):\n                polygon = cascaded_union(polygon)\n            if isinstance(polygon, Polygon):\n                point = Point(lon, lat)", "12.1.4_prompt": "import geopandas as gpd\nimport shapely\n\ndef check_point(point: shapely.geometry.Point, name: str, polygons: gpd.GeoDataFrame) -> bool:\n    \"\"\"Check if a point is in the polygon with the given name. The polygons GeoDataFrame contains the polygon boundaries and names in the `name` column.\"\"\"", "12.1.4_generated": "import geopandas as gpd\nimport shapely\n\ndef check_point(point: shapely.geometry.Point, name: str, polygons: gpd.GeoDataFrame) -> bool:\n    \"\"\"Check if a point is in the polygon with the given name. The polygons GeoDataFrame contains the polygon boundaries and names in the `name` column.\"\"\"\n    return point.within(polygons[polygons['name'] == name].geometry)\n\ndef check_point_in_polygon(point: shapely.geometry.Point, polygons: gpd.GeoDataFrame) -> bool:\n    \"\"\"Check if a point is in the polygon with the given name. The polygons GeoDataFrame contains the polygon boundaries and names in the `name` column.\"\"\"\n    return point.within(polygons.geometry)\n\ndef check_point_in_polygon_with_name(point: shapely.geometry.Point, polygons: gpd.GeoDataFrame) -> bool:\n    \"\"\"Check if a point is in the polygon with the given name. The polygons GeoDataFrame contains the polygon boundaries and names in the `name` column.\"\"\"\n    return point.within", "12.1.4_sanitized": "import geopandas as gpd\nimport shapely\n\ndef check_point(point: shapely.geometry.Point, name: str, polygons: gpd.GeoDataFrame) -> bool:\n    \"\"\"Check if a point is in the polygon with the given name. The polygons GeoDataFrame contains the polygon boundaries and names in the `name` column.\"\"\"\n    return point.within(polygons[polygons['name'] == name].geometry)\n", "12.1.5_prompt": "import shapely\n\ndef check_point(point: shapely.geometry.Point, name: str, polygons: str) -> bool:\n    \"\"\"Check if a point is in the polygon with the given name. The polygons is the path to the shapefile with polygons boundaries with `name` feature.\"\"\"", "12.1.5_generated": "import shapely\n\ndef check_point(point: shapely.geometry.Point, name: str, polygons: str) -> bool:\n    \"\"\"Check if a point is in the polygon with the given name. The polygons is the path to the shapefile with polygons boundaries with `name` feature.\"\"\"\n    from shapely.geometry import Point, Polygon\n    from shapely.ops import cascaded_union\n    from shapely.wkt import loads\n    from shapely.geometry.base import BaseGeometry\n\n    polygons = loads(polygons)\n    polygons = cascaded_union(polygons)\n    return Point(point).within(polygons)\n\n\ndef check_point_in_polygon(point: shapely.geometry.Point, name: str, polygons: str) -> bool:\n    \"\"\"Check if a point is in the polygon with the given name. The polygons is the path to the shapefile with polygons boundaries with `name` feature.\"\"\"\n    from shapely.geometry import Point, Polygon\n    from shapely.ops import cascaded_union\n   ", "12.1.5_sanitized": "import shapely\n\ndef check_point(point: shapely.geometry.Point, name: str, polygons: str) -> bool:\n    \"\"\"Check if a point is in the polygon with the given name. The polygons is the path to the shapefile with polygons boundaries with `name` feature.\"\"\"\n    from shapely.geometry import Point, Polygon\n    from shapely.ops import cascaded_union\n    from shapely.wkt import loads\n    from shapely.geometry.base import BaseGeometry\n\n    polygons = loads(polygons)\n    polygons = cascaded_union(polygons)\n    return Point(point).within(polygons)\n\n", "12.1.6_prompt": "import shapely\n\ndef check_point(point: shapely.geometry.Point, name: str, polygons: str) -> bool:\n    \"\"\"Check if a point is in the polygon with the given name. The polygons is the path to the geojson with polygons boundaries with `name` feature.\"\"\"", "12.1.6_generated": "import shapely\n\ndef check_point(point: shapely.geometry.Point, name: str, polygons: str) -> bool:\n    \"\"\"Check if a point is in the polygon with the given name. The polygons is the path to the geojson with polygons boundaries with `name` feature.\"\"\"\n    with open(polygons) as f:\n        polygons = f.read()\n    polygons = shapely.geometry.shape(polygons)\n    return point.within(polygons[name])\n\n\ndef check_point_in_polygon(point: shapely.geometry.Point, polygons: str) -> bool:\n    \"\"\"Check if a point is in the polygon with the given name. The polygons is the path to the geojson with polygons boundaries with `name` feature.\"\"\"\n    with open(polygons) as f:\n        polygons = f.read()\n    polygons = shapely.geometry.shape(polygons)\n    return point.within(polygons)", "12.1.6_sanitized": "import shapely\n\ndef check_point(point: shapely.geometry.Point, name: str, polygons: str) -> bool:\n    \"\"\"Check if a point is in the polygon with the given name. The polygons is the path to the geojson with polygons boundaries with `name` feature.\"\"\"\n    with open(polygons) as f:\n        polygons = f.read()\n    polygons = shapely.geometry.shape(polygons)\n    return point.within(polygons[name])\n\n", "12.2.1_prompt": "import geopandas as gpd\n\ndef check_point(lat: float, lon: float, city: str, cities: gpd.GeoDataFrame) -> bool:\n    \"\"\"Check if a point is in the given city. The cities GeoDataFrame contains the cities boundaries and names in the `name` column.\"\"\"", "12.2.1_generated": "import geopandas as gpd\n\ndef check_point(lat: float, lon: float, city: str, cities: gpd.GeoDataFrame) -> bool:\n    \"\"\"Check if a point is in the given city. The cities GeoDataFrame contains the cities boundaries and names in the `name` column.\"\"\"\n    city_gdf = cities[cities.name == city]\n    return city_gdf.geometry.contains(gpd.points(lat, lon))\n\n\ndef check_point_in_city(lat: float, lon: float, cities: gpd.GeoDataFrame) -> str:\n    \"\"\"Check if a point is in the given city. The cities GeoDataFrame contains the cities boundaries and names in the `name` column.\"\"\"\n    for city in cities.name:\n        if check_point(lat, lon, city, cities):\n            return city\n    return None", "12.2.1_sanitized": "import geopandas as gpd\n\ndef check_point(lat: float, lon: float, city: str, cities: gpd.GeoDataFrame) -> bool:\n    \"\"\"Check if a point is in the given city. The cities GeoDataFrame contains the cities boundaries and names in the `name` column.\"\"\"\n    city_gdf = cities[cities.name == city]\n    return city_gdf.geometry.contains(gpd.points(lat, lon))\n\n", "12.2.2_prompt": "def check_point(lat: float, lon: float, city: str, cities: str) -> bool:\n    \"\"\"Check if a point is in the given city. The cities is the path to the shapefile with cities boundaries with `name` feature.\"\"\"", "12.2.2_generated": "def check_point(lat: float, lon: float, city: str, cities: str) -> bool:\n    \"\"\"Check if a point is in the given city. The cities is the path to the shapefile with cities boundaries with `name` feature.\"\"\"\n    import geopandas as gpd\n    import shapely.geometry as sg\n    import shapely.wkt as wkt\n\n    cities = gpd.read_file(cities)\n    cities = cities[cities[\"name\"] == city]\n    cities = cities.geometry.apply(wkt.loads)\n    cities = cities.to_crs(\"epsg:4326\")\n\n    point = sg.Point(lon, lat)\n    return any(point.within(c) for c in cities)", "12.2.2_sanitized": "def check_point(lat: float, lon: float, city: str, cities: str) -> bool:\n    \"\"\"Check if a point is in the given city. The cities is the path to the shapefile with cities boundaries with `name` feature.\"\"\"\n    import geopandas as gpd\n    import shapely.geometry as sg\n    import shapely.wkt as wkt\n\n    cities = gpd.read_file(cities)\n    cities = cities[cities[\"name\"] == city]\n    cities = cities.geometry.apply(wkt.loads)\n    cities = cities.to_crs(\"epsg:4326\")\n\n    point = sg.Point(lon, lat)", "12.2.3_prompt": "def check_point(lat: float, lon: float, city: str, cities: str) -> bool:\n    \"\"\"Check if a point is in the given city. The cities is the path to the geojson with cities boundaries with `name` feature.\"\"\"", "12.2.3_generated": "def check_point(lat: float, lon: float, city: str, cities: str) -> bool:\n    \"\"\"Check if a point is in the given city. The cities is the path to the geojson with cities boundaries with `name` feature.\"\"\"\n    import geopandas as gpd\n    import shapely.geometry as sg\n    import shapely.wkt as wkt\n\n    cities = gpd.read_file(cities)\n    cities = cities[cities[\"name\"] == city]\n    cities = cities.geometry.apply(wkt.loads)\n    cities = cities.to_crs(\"EPSG:4326\")\n    cities = cities.to_crs(\"EPSG:3857\")\n\n    point = sg.Point(lon, lat)\n    return point.within(cities)", "12.2.3_sanitized": "def check_point(lat: float, lon: float, city: str, cities: str) -> bool:\n    \"\"\"Check if a point is in the given city. The cities is the path to the geojson with cities boundaries with `name` feature.\"\"\"\n    import geopandas as gpd\n    import shapely.geometry as sg\n    import shapely.wkt as wkt\n\n    cities = gpd.read_file(cities)\n    cities = cities[cities[\"name\"] == city]\n    cities = cities.geometry.apply(wkt.loads)\n    cities = cities.to_crs(\"EPSG:4326\")\n    cities = cities.to_crs(\"EPSG:3857\")\n\n    point = sg.Point(lon, lat)", "12.2.4_prompt": "import geopandas as gpd\nimport shapely\n\ndef check_point(point: shapely.geometry.Point, city: str, cities: gpd.GeoDataFrame) -> bool:\n    \"\"\"Check if a point is in the given city. The cities GeoDataFrame contains the cities boundaries and names in the `name` column.\"\"\"", "12.2.4_generated": "import geopandas as gpd\nimport shapely\n\ndef check_point(point: shapely.geometry.Point, city: str, cities: gpd.GeoDataFrame) -> bool:\n    \"\"\"Check if a point is in the given city. The cities GeoDataFrame contains the cities boundaries and names in the `name` column.\"\"\"\n    return point.within(cities.loc[cities['name'] == city, 'geometry'])\n\n\ndef check_point_in_city(point: shapely.geometry.Point, cities: gpd.GeoDataFrame) -> str:\n    \"\"\"Check if a point is in the given city. The cities GeoDataFrame contains the cities boundaries and names in the `name` column.\"\"\"\n    for city in cities['name']:\n        if point.within(cities.loc[cities['name'] == city, 'geometry']):\n            return city\n    return None", "12.2.4_sanitized": "import geopandas as gpd\nimport shapely\n\ndef check_point(point: shapely.geometry.Point, city: str, cities: gpd.GeoDataFrame) -> bool:\n    \"\"\"Check if a point is in the given city. The cities GeoDataFrame contains the cities boundaries and names in the `name` column.\"\"\"\n    return point.within(cities.loc[cities['name'] == city, 'geometry'])\n\n", "12.2.5_prompt": "import shapely\n\ndef check_point(point: shapely.geometry.Point, city: str, cities: str) -> bool:\n    \"\"\"Check if a point is in the given city. The cities is the path to the shapefile with cities boundaries with `name` feature.\"\"\"", "12.2.5_generated": "import shapely\n\ndef check_point(point: shapely.geometry.Point, city: str, cities: str) -> bool:\n    \"\"\"Check if a point is in the given city. The cities is the path to the shapefile with cities boundaries with `name` feature.\"\"\"\n    cities = shapely.wkb.loads(cities)\n    for city_ in cities:\n        if city_['name'] == city:\n            if point.within(city_):\n                return True\n    return False", "12.2.5_sanitized": "import shapely\n\ndef check_point(point: shapely.geometry.Point, city: str, cities: str) -> bool:\n    \"\"\"Check if a point is in the given city. The cities is the path to the shapefile with cities boundaries with `name` feature.\"\"\"\n    cities = shapely.wkb.loads(cities)\n    for city_ in cities:\n        if city_['name'] == city:\n            if point.within(city_):\n                return True", "12.2.6_prompt": "import shapely\n\ndef check_point(point: shapely.geometry.Point, city: str, cities: str) -> bool:\n    \"\"\"Check if a point is in the given city. The cities is the path to the geojson with cities boundaries with `name` feature.\"\"\"", "12.2.6_generated": "import shapely\n\ndef check_point(point: shapely.geometry.Point, city: str, cities: str) -> bool:\n    \"\"\"Check if a point is in the given city. The cities is the path to the geojson with cities boundaries with `name` feature.\"\"\"\n    with open(cities) as f:\n        cities = shapely.geometry.shape(shapely.geometry.loads(f.read()))\n    return point.within(cities[cities.index(cities[cities.index(city)])])\n\n\ndef check_point_in_city(point: shapely.geometry.Point, city: str, cities: str) -> bool:\n    \"\"\"Check if a point is in the given city. The cities is the path to the geojson with cities boundaries with `name` feature.\"\"\"\n    with open(cities) as f:\n        cities = shapely.geometry.shape(shapely.geometry.loads(f.read()))\n    return point.within(cities[cities.index(city)])", "12.2.6_sanitized": "import shapely\n\ndef check_point(point: shapely.geometry.Point, city: str, cities: str) -> bool:\n    \"\"\"Check if a point is in the given city. The cities is the path to the geojson with cities boundaries with `name` feature.\"\"\"\n    with open(cities) as f:\n        cities = shapely.geometry.shape(shapely.geometry.loads(f.read()))\n    return point.within(cities[cities.index(cities[cities.index(city)])])\n\n", "13.1.1_prompt": "import geopandas as gpd\n\ndef get_polygon_name(lat: float, lon: float, polygons: gpd.GeoDataFrame) -> str:\n    \"\"\"Get the name of a polygon in which a point is. The polygons GeoDataFrame contains the polygons boundaries and names in the `name` column.\"\"\"", "13.1.1_generated": "import geopandas as gpd\n\ndef get_polygon_name(lat: float, lon: float, polygons: gpd.GeoDataFrame) -> str:\n    \"\"\"Get the name of a polygon in which a point is. The polygons GeoDataFrame contains the polygons boundaries and names in the `name` column.\"\"\"\n    polygons = polygons.to_crs(epsg=4326)\n    polygons = polygons.to_crs(epsg=3857)\n    polygons = polygons.to_crs(epsg=4326)\n    polygons = polygons.to_crs(epsg=3857)\n    polygons = polygons.to_crs(epsg=4326)\n    polygons = polygons.to_crs(epsg=3857)\n    polygons = polygons.to_crs(epsg=4326)\n    polygons = polygons.to_crs(epsg=3857)\n    polygons = polygons.to_crs(eps", "13.1.1_sanitized": "", "13.1.2_prompt": "def check_country(lat: float, lon: float, polygons: str) -> str:\n    \"\"\"Get the name of a polygon in which a point is. The polygons is the path to the shapefile with polygons boundaries with `name` feature.\"\"\"", "13.1.2_generated": "def check_country(lat: float, lon: float, polygons: str) -> str:\n    \"\"\"Get the name of a polygon in which a point is. The polygons is the path to the shapefile with polygons boundaries with `name` feature.\"\"\"\n    import shapely.geometry\n    import shapely.wkt\n    import shapely.ops\n    import shapely.speedups\n    import shapely.prepared\n    import shapely.affinity\n    import shapely.geometry.multipolygon\n    import shapely.geometry.polygon\n    import shapely.geometry.linestring\n    import shapely.geometry.point\n    import shapely.geometry.collection\n    import shapely.geometry.base\n    import shapely.geometry.multi\n    import shapely.geometry.multi_polygon\n    import shapely.geometry.multi_linestring\n    import shapely.geometry.multi_point\n    import shapely.geometry.multi_collection\n    import shapely.geometry.multi_polygon\n    import shapely.geometry.", "13.1.2_sanitized": "", "13.1.3_prompt": "def check_country(lat: float, lon: float, polygons: str) -> str:\n    \"\"\"Get the name of a polygon in which a point is. The polygons is the path to the geojson with polygons boundaries with `name` feature.\"\"\"", "13.1.3_generated": "def check_country(lat: float, lon: float, polygons: str) -> str:\n    \"\"\"Get the name of a polygon in which a point is. The polygons is the path to the geojson with polygons boundaries with `name` feature.\"\"\"\n    import json\n    import geojson\n    import shapely.geometry\n    import shapely.wkt\n    import shapely.ops\n    import shapely.prepared\n    import shapely.speedups\n    import shapely.affinity\n    import shapely.affinity\n    import shapely.ops\n    import shapely.prepared\n    import shapely.speedups\n    import shapely.wkt\n    import shapely.geometry\n    import shapely.affinity\n    import shapely.ops\n    import shapely.prepared\n    import shapely.speedups\n    import shapely.wkt\n    import shapely.geometry\n    import shapely.affinity\n    import shapely.ops\n    import shapely.prepared\n    import shapely.speed", "13.1.3_sanitized": "", "13.1.4_prompt": "import geopandas as gpd\nimport shapely\n\ndef check_country(point: shapely.geometry.Point, polygons: gpd.GeoDataFrame) -> str:\n    \"\"\"Get the name of a polygon in which a point is. The polygons GeoDataFrame contains the polygons boundaries and names in the `name` column.\"\"\"", "13.1.4_generated": "import geopandas as gpd\nimport shapely\n\ndef check_country(point: shapely.geometry.Point, polygons: gpd.GeoDataFrame) -> str:\n    \"\"\"Get the name of a polygon in which a point is. The polygons GeoDataFrame contains the polygons boundaries and names in the `name` column.\"\"\"\n    for polygon in polygons.geometry:\n        if polygon.contains(point):\n            return polygons.loc[polygons.geometry == polygon, 'name'].iloc[0]\n    return 'Unknown'\n\n\ndef check_country_from_point(point: shapely.geometry.Point, polygons: gpd.GeoDataFrame) -> str:\n    \"\"\"Get the name of a polygon in which a point is. The polygons GeoDataFrame contains the polygons boundaries and names in the `name` column.\"\"\"\n    for polygon in polygons.geometry:\n        if polygon.contains(point):\n            return polygons.loc[polygons.geometry == polygon, 'name'].iloc[0]\n    return 'Unknown'\n\n\ndef check_country_from_point_and_polyg", "13.1.4_sanitized": "import geopandas as gpd\nimport shapely\n\ndef check_country(point: shapely.geometry.Point, polygons: gpd.GeoDataFrame) -> str:\n    \"\"\"Get the name of a polygon in which a point is. The polygons GeoDataFrame contains the polygons boundaries and names in the `name` column.\"\"\"\n    for polygon in polygons.geometry:\n        if polygon.contains(point):\n            return polygons.loc[polygons.geometry == polygon, 'name'].iloc[0]\n    return 'Unknown'\n\n", "13.1.5_prompt": "import shapely\n\ndef check_country(point: shapely.geometry.Point, polygons: str) -> str:\n    \"\"\"Get the name of a polygon in which a point is. The polygons is the path to the shapefile with polygons boundaries with `name` feature.\"\"\"", "13.1.5_generated": "import shapely\n\ndef check_country(point: shapely.geometry.Point, polygons: str) -> str:\n    \"\"\"Get the name of a polygon in which a point is. The polygons is the path to the shapefile with polygons boundaries with `name` feature.\"\"\"\n    from shapely.geometry import Point\n    from shapely.wkt import loads\n    from shapely.ops import cascaded_union\n    from shapely.geometry import Polygon\n    from shapely.geometry import MultiPolygon\n    from shapely.geometry import mapping\n    from shapely.geometry import asShape\n    from shapely.geometry import MultiPolygon\n    from shapely.geometry import Polygon\n    from shapely.geometry import Point\n    from shapely.geometry import MultiPoint\n    from shapely.geometry import LineString\n    from shapely.geometry import MultiLineString\n    from shapely.geometry import MultiPolygon\n    from shapely.geometry import LinearRing\n    from shapely.geometry import MultiPolygon\n    from shapely.geometry import MultiLineString\n    from shap", "13.1.5_sanitized": "", "13.1.6_prompt": "import shapely\n\ndef check_country(point: shapely.geometry.Point, polygons: str) -> str:\n    \"\"\"Get the name of a polygon in which a point is. The polygons is the path to the geojson with polygons boundaries with `name` feature.\"\"\"", "13.1.6_generated": "import shapely\n\ndef check_country(point: shapely.geometry.Point, polygons: str) -> str:\n    \"\"\"Get the name of a polygon in which a point is. The polygons is the path to the geojson with polygons boundaries with `name` feature.\"\"\"\n    with open(polygons) as f:\n        polygons = f.read()\n    polygons = shapely.geometry.shape(shapely.geometry.loads(polygons))\n    for polygon in polygons:\n        if polygon.contains(point):\n            return polygon.name\n    return \"Unknown\"", "13.1.6_sanitized": "import shapely\n\ndef check_country(point: shapely.geometry.Point, polygons: str) -> str:\n    \"\"\"Get the name of a polygon in which a point is. The polygons is the path to the geojson with polygons boundaries with `name` feature.\"\"\"\n    with open(polygons) as f:\n        polygons = f.read()\n    polygons = shapely.geometry.shape(shapely.geometry.loads(polygons))\n    for polygon in polygons:\n        if polygon.contains(point):\n            return polygon.name", "13.2.1_prompt": "import geopandas as gpd\n\ndef check_country(lat: float, lon: float, countries: gpd.GeoDataFrame) -> str:\n    \"\"\"Check in which country a point is. The countries GeoDataFrame contains the countries boundaries and names in the `name` column.\"\"\"", "13.2.1_generated": "import geopandas as gpd\n\ndef check_country(lat: float, lon: float, countries: gpd.GeoDataFrame) -> str:\n    \"\"\"Check in which country a point is. The countries GeoDataFrame contains the countries boundaries and names in the `name` column.\"\"\"\n    for country in countries.name:\n        if country in countries.loc[countries.geometry.contains(gpd.points.from_array([(lat, lon)]))]:\n            return country\n    return \"Unknown\"\n\n\ndef check_country_from_point(point: gpd.GeoDataFrame, countries: gpd.GeoDataFrame) -> str:\n    \"\"\"Check in which country a point is. The countries GeoDataFrame contains the countries boundaries and names in the `name` column.\"\"\"\n    for country in countries.name:\n        if country in countries.loc[countries.geometry.contains(point)]:\n            return country\n    return \"Unknown\"", "13.2.1_sanitized": "import geopandas as gpd\n\ndef check_country(lat: float, lon: float, countries: gpd.GeoDataFrame) -> str:\n    \"\"\"Check in which country a point is. The countries GeoDataFrame contains the countries boundaries and names in the `name` column.\"\"\"\n    for country in countries.name:\n        if country in countries.loc[countries.geometry.contains(gpd.points.from_array([(lat, lon)]))]:\n            return country\n    return \"Unknown\"\n\n", "13.2.2_prompt": "def check_country(lat: float, lon: float, countries: str) -> str:\n    \"\"\"Check in which country a point is. The countries is the path to the shapefile with countries boundaries with `name` feature.\"\"\"", "13.2.2_generated": "def check_country(lat: float, lon: float, countries: str) -> str:\n    \"\"\"Check in which country a point is. The countries is the path to the shapefile with countries boundaries with `name` feature.\"\"\"\n    import geopandas as gpd\n    import shapely.geometry as sg\n    import shapely.wkt as wkt\n\n    countries = gpd.read_file(countries)\n    countries = countries.to_crs(\"epsg:4326\")\n    countries = countries.to_crs(\"epsg:3857\")\n    countries = countries.to_crs(\"epsg:4326\")\n\n    countries = countries.to_crs(\"epsg:4326\")\n    countries = countries.to_crs(\"epsg:3857\")\n    countries = countries.to_crs(\"epsg:4326\")\n\n    countries = countries.to_crs(\"epsg:4326\")\n    countries = countries.to_crs(\"epsg:385", "13.2.2_sanitized": "", "13.2.3_prompt": "def check_country(lat: float, lon: float, countries: str) -> str:\n    \"\"\"Check in which country a point is. The countries is the path to the geojson with countries boundaries with `name` feature.\"\"\"", "13.2.3_generated": "def check_country(lat: float, lon: float, countries: str) -> str:\n    \"\"\"Check in which country a point is. The countries is the path to the geojson with countries boundaries with `name` feature.\"\"\"\n    import geopandas as gpd\n    import shapely.geometry as sg\n    import shapely.wkt as wkt\n\n    countries = gpd.read_file(countries)\n    countries = countries.to_crs(\"EPSG:4326\")\n    countries = countries.to_crs(\"EPSG:3857\")\n\n    point = sg.Point(lon, lat)\n    country = countries.sindex.get_geoid(point, 1)\n    country = countries.loc[country]\n    country = country.iloc[0]\n    country = country.name\n    return country", "13.2.3_sanitized": "def check_country(lat: float, lon: float, countries: str) -> str:\n    \"\"\"Check in which country a point is. The countries is the path to the geojson with countries boundaries with `name` feature.\"\"\"\n    import geopandas as gpd\n    import shapely.geometry as sg\n    import shapely.wkt as wkt\n\n    countries = gpd.read_file(countries)\n    countries = countries.to_crs(\"EPSG:4326\")\n    countries = countries.to_crs(\"EPSG:3857\")\n\n    point = sg.Point(lon, lat)\n    country = countries.sindex.get_geoid(point, 1)\n    country = countries.loc[country]\n    country = country.iloc[0]\n    country = country.name", "13.2.4_prompt": "import geopandas as gpd\nimport shapely\n\ndef check_country(point: shapely.geometry.Point, countries: gpd.GeoDataFrame) -> str:\n    \"\"\"Check in which country a point is. The countries GeoDataFrame contains the countries boundaries and names in the `name` column.\"\"\"", "13.2.4_generated": "import geopandas as gpd\nimport shapely\n\ndef check_country(point: shapely.geometry.Point, countries: gpd.GeoDataFrame) -> str:\n    \"\"\"Check in which country a point is. The countries GeoDataFrame contains the countries boundaries and names in the `name` column.\"\"\"\n    for country in countries.geometry:\n        if country.contains(point):\n            return country.name\n    return \"Unknown\"\n\n\ndef check_country_from_point(point: shapely.geometry.Point, countries: gpd.GeoDataFrame) -> str:\n    \"\"\"Check in which country a point is. The countries GeoDataFrame contains the countries boundaries and names in the `name` column.\"\"\"\n    for country in countries.geometry:\n        if country.contains(point):\n            return country.name\n    return \"Unknown\"\n\n\ndef check_country_from_point_and_country(point: shapely.geometry.Point, countries: gpd.GeoDataFrame, country: str) -> str:\n    \"\"\"Check in which country a point is. The countries GeoDataFrame contains the countries boundaries and names in the `name` column.\"\"\"\n   ", "13.2.4_sanitized": "import geopandas as gpd\nimport shapely\n\ndef check_country(point: shapely.geometry.Point, countries: gpd.GeoDataFrame) -> str:\n    \"\"\"Check in which country a point is. The countries GeoDataFrame contains the countries boundaries and names in the `name` column.\"\"\"\n    for country in countries.geometry:\n        if country.contains(point):\n            return country.name\n    return \"Unknown\"\n\n", "13.2.5_prompt": "import shapely\n\ndef check_country(point: shapely.geometry.Point, countries: str) -> str:\n    \"\"\"Check in which country a point is. The countries is the path to the shapefile with countries boundaries with `name` feature.\"\"\"", "13.2.5_generated": "import shapely\n\ndef check_country(point: shapely.geometry.Point, countries: str) -> str:\n    \"\"\"Check in which country a point is. The countries is the path to the shapefile with countries boundaries with `name` feature.\"\"\"\n    countries = shapely.wkb.loads(countries)\n    for country in countries:\n        if country.contains(point):\n            return country.name\n    return \"Unknown\"\n\n\ndef check_country_from_point(point: shapely.geometry.Point, countries: str) -> str:\n    \"\"\"Check in which country a point is. The countries is the path to the shapefile with countries boundaries with `name` feature.\"\"\"\n    countries = shapely.wkb.loads(countries)\n    for country in countries:\n        if country.contains(point):\n            return country.name\n    return \"Unknown\"\n\n\ndef check_country_from_point_and_country(point: shapely.geometry.Point, countries: str, country: str) -> str:\n    \"\"\"Check in which country a point is. The countries is the", "13.2.5_sanitized": "import shapely\n\ndef check_country(point: shapely.geometry.Point, countries: str) -> str:\n    \"\"\"Check in which country a point is. The countries is the path to the shapefile with countries boundaries with `name` feature.\"\"\"\n    countries = shapely.wkb.loads(countries)\n    for country in countries:\n        if country.contains(point):\n            return country.name\n    return \"Unknown\"\n\n", "13.2.6_prompt": "import shapely\n\ndef check_country(point: shapely.geometry.Point, countries: str) -> str:\n    \"\"\"Check in which country a point is. The countries is the path to the geojson with countries boundaries with `name` feature.\"\"\"", "13.2.6_generated": "import shapely\n\ndef check_country(point: shapely.geometry.Point, countries: str) -> str:\n    \"\"\"Check in which country a point is. The countries is the path to the geojson with countries boundaries with `name` feature.\"\"\"\n    countries = shapely.geometry.shape(shapely.geometry.MultiPolygon(countries))\n    if point.within(countries):\n        return point.wkt\n    else:\n        return None\n\n\ndef check_country_by_name(point: shapely.geometry.Point, countries: str) -> str:\n    \"\"\"Check in which country a point is. The countries is the path to the geojson with countries boundaries with `name` feature.\"\"\"\n    countries = shapely.geometry.shape(shapely.geometry.MultiPolygon(countries))\n    if point.within(countries):\n        return point.wkt\n    else:\n        return None\n\n\ndef check_country_by_name_and_code(point: shapely.geometry.Point, countries: str) -> str:\n    \"\"\"Check in which", "13.2.6_sanitized": "import shapely\n\ndef check_country(point: shapely.geometry.Point, countries: str) -> str:\n    \"\"\"Check in which country a point is. The countries is the path to the geojson with countries boundaries with `name` feature.\"\"\"\n    countries = shapely.geometry.shape(shapely.geometry.MultiPolygon(countries))\n    if point.within(countries):\n        return point.wkt\n    else:\n        return None\n\n", "14.1_prompt": "def check_country(lat: float, lon: float) -> str:\n    \"\"\"Check in which country a point is. Use the osmnx to perform geocoding to find country name.\"\"\"", "14.1_generated": "def check_country(lat: float, lon: float) -> str:\n    \"\"\"Check in which country a point is. Use the osmnx to perform geocoding to find country name.\"\"\"\n    import osmnx as ox\n    import geopandas as gpd\n    import pandas as pd\n    import numpy as np\n    import matplotlib.pyplot as plt\n    import matplotlib.patches as mpatches\n    import matplotlib.colors as mcolors\n    import matplotlib.patches as mpatches\n    import matplotlib.colors as mcolors\n    import matplotlib.patches as mpatches\n    import matplotlib.colors as mcolors\n    import matplotlib.patches as mpatches\n    import matplotlib.colors as mcolors\n    import matplotlib.patches as mpatches\n    import matplotlib.colors as mcolors\n    import matplotlib.patches as mpatches\n    import matplotlib.colors as mcolors\n    import matplotlib.patches as mpatches\n", "14.1_sanitized": "", "14.2_prompt": "import shapely\n\ndef check_country(point: shapely.geometry.Point) -> str:\n    \"\"\"Check in which country a point is. Use the osmnx to perform geocoding to find country name.\"\"\"", "14.2_generated": "import shapely\n\ndef check_country(point: shapely.geometry.Point) -> str:\n    \"\"\"Check in which country a point is. Use the osmnx to perform geocoding to find country name.\"\"\"\n    from osmnx import geocode\n    country = geocode(point.wkt, return_geometry=False)\n    return country\n\ndef check_country_from_point(point: shapely.geometry.Point) -> str:\n    \"\"\"Check in which country a point is. Use the osmnx to perform geocoding to find country name.\"\"\"\n    from osmnx import geocode\n    country = geocode(point.wkt, return_geometry=False)\n    return country\n\ndef check_country_from_bbox(bbox: shapely.geometry.Polygon) -> str:\n    \"\"\"Check in which country a bbox is. Use the osmnx to perform geocoding to find country name.\"\"\"\n    from osmnx import geocode\n    country = geocode(bbox.wkt, return_geometry=False)", "14.2_sanitized": "import shapely\n\ndef check_country(point: shapely.geometry.Point) -> str:\n    \"\"\"Check in which country a point is. Use the osmnx to perform geocoding to find country name.\"\"\"\n    from osmnx import geocode\n    country = geocode(point.wkt, return_geometry=False)\n    return country\n", "15.1_prompt": "def check_country(lat: float, lon: float, country: str) -> bool:\n    \"\"\"Check if a point lies within the given country. Use the osmnx to perform geocoding.\"\"\"", "15.1_generated": "def check_country(lat: float, lon: float, country: str) -> bool:\n    \"\"\"Check if a point lies within the given country. Use the osmnx to perform geocoding.\"\"\"\n    import osmnx as ox\n    import geopandas as gpd\n    import pandas as pd\n    import numpy as np\n\n    # Get the country's geojson\n    country_gdf = ox.geocode_to_gdf(country)\n\n    # Get the point's latitude and longitude\n    point_lat = lat\n    point_lon = lon\n\n    # Get the point's country\n    point_country = ox.geocode(point_lat, point_lon)\n\n    # Check if the point is within the country\n    if point_country == country:\n        return True\n    else:\n        return False\n\n\ndef check_country_within_country(lat: float, lon: float, country: str, country_within: str) -> bool:\n    \"\"\"Check if a point lies within the given", "15.1_sanitized": "def check_country(lat: float, lon: float, country: str) -> bool:\n    \"\"\"Check if a point lies within the given country. Use the osmnx to perform geocoding.\"\"\"\n    import osmnx as ox\n    import geopandas as gpd\n    import pandas as pd\n    import numpy as np\n\n    # Get the country's geojson\n    country_gdf = ox.geocode_to_gdf(country)\n\n    # Get the point's latitude and longitude\n    point_lat = lat\n    point_lon = lon\n\n    # Get the point's country\n    point_country = ox.geocode(point_lat, point_lon)\n\n    # Check if the point is within the country\n    if point_country == country:\n        return True\n    else:", "15.2_prompt": "import shapely\n\ndef check_country(point: shapely.geometry.Point, country: str) -> bool:\n    \"\"\"Check if a point lies within the given country. Use the osmnx to perform geocoding.\"\"\"", "15.2_generated": "import shapely\n\ndef check_country(point: shapely.geometry.Point, country: str) -> bool:\n    \"\"\"Check if a point lies within the given country. Use the osmnx to perform geocoding.\"\"\"\n    from osmnx import geocode\n    from shapely.geometry import Point\n    from shapely.geometry.polygon import Polygon\n    from shapely.geometry.multipolygon import MultiPolygon\n    from shapely.geometry.linestring import LineString\n    from shapely.geometry.collection import MultiCollection\n    from shapely.geometry.multipoint import MultiPoint\n    from shapely.geometry.point import Point\n    from shapely.geometry.polygon import Polygon\n    from shapely.geometry.linestring import LineString\n    from shapely.geometry.collection import MultiCollection\n    from shapely.geometry.multipoint import MultiPoint\n    from shapely.geometry.point import Point\n    from shapely.geometry.polygon import Polygon\n    from shapely.geometry.linestring import Line", "15.2_sanitized": "", "16.1_prompt": "import geopandas as gpd\n\ndef trajectory_length(trajectory: gpd.GeoDataFrame) -> float:\n    \"\"\"Calculate the length of a trajectory. It is saved in a geodataframe as a collection of points and timestamps in the `geometry` and `t` columns. Use the `movingpandas` library.\"\"\"", "16.1_generated": "import geopandas as gpd\n\ndef trajectory_length(trajectory: gpd.GeoDataFrame) -> float:\n    \"\"\"Calculate the length of a trajectory. It is saved in a geodataframe as a collection of points and timestamps in the `geometry` and `t` columns. Use the `movingpandas` library.\"\"\"\n    import movingpandas as mp\n    return mp.distance(trajectory, 'geometry', 't').sum()\n\ndef trajectory_speed(trajectory: gpd.GeoDataFrame) -> float:\n    \"\"\"Calculate the average speed of a trajectory. It is saved in a geodataframe as a collection of points and timestamps in the `geometry` and `t` columns. Use the `movingpandas` library.\"\"\"\n    import movingpandas as mp\n    return trajectory_length(trajectory) / trajectory.t.max()\n\ndef trajectory_speed_max(trajectory: gpd.GeoDataFrame) -> float:\n    \"\"\"Calculate the maximum speed of a trajectory. It is saved in a geodataframe as a collection of points and timestamps in the `geometry` and `t` columns.", "16.1_sanitized": "import geopandas as gpd\n\ndef trajectory_length(trajectory: gpd.GeoDataFrame) -> float:\n    \"\"\"Calculate the length of a trajectory. It is saved in a geodataframe as a collection of points and timestamps in the `geometry` and `t` columns. Use the `movingpandas` library.\"\"\"\n    import movingpandas as mp\n    return mp.distance(trajectory, 'geometry', 't').sum()\n", "16.3_prompt": "def trajectory_length(trajectory: str) -> float:\n    \"\"\"Calculate the length of a trajectory. It is saved in a geojson as a collection of points and timestamps in the `geometry` and `t` columns. Use the `movingpandas` library.\"\"\"", "16.3_generated": "def trajectory_length(trajectory: str) -> float:\n    \"\"\"Calculate the length of a trajectory. It is saved in a geojson as a collection of points and timestamps in the `geometry` and `t` columns. Use the `movingpandas` library.\"\"\"\n    import movingpandas as mp\n    import pandas as pd\n    import numpy as np\n\n    df = pd.read_csv(trajectory, sep='\\t')\n    df['t'] = pd.to_datetime(df['t'])\n    df['t'] = df['t'].dt.total_seconds()\n    df['t'] = df['t'].astype(np.float64)\n    df['geometry'] = df['geometry'].apply(lambda x: x.split(' '))\n    df['geometry'] = df['geometry'].apply(lambda x: [float(y) for y in x])\n    df['geometry'] = df['geometry'].apply(lambda x: np.array(x))\n    df['geometry'] = df['geometry'].apply(lambda x: np.array(x).reshape(1, -1))\n    df['", "16.3_sanitized": "", "16.4_prompt": "import geopandas as gpd\n\ndef walk_length(trip: gpd.GeoDataFrame) -> float:\n    \"\"\"Calculate the length of a walk. It is saved in a geodataframe as a collection of points and timestamps in the `geometry` and `t` columns. Use the `movingpandas` library.\"\"\"", "16.4_generated": "import geopandas as gpd\n\ndef walk_length(trip: gpd.GeoDataFrame) -> float:\n    \"\"\"Calculate the length of a walk. It is saved in a geodataframe as a collection of points and timestamps in the `geometry` and `t` columns. Use the `movingpandas` library.\"\"\"\n    import movingpandas as mp\n    return mp.distance(trip.geometry, t=trip.t).sum()\n\ndef walk_speed(trip: gpd.GeoDataFrame) -> float:\n    \"\"\"Calculate the average speed of a walk. It is saved in a geodataframe as a collection of points and timestamps in the `geometry` and `t` columns. Use the `movingpandas` library.\"\"\"\n    import movingpandas as mp\n    return walk_length(trip) / (trip.t.max() - trip.t.min())\n\ndef walk_duration(trip: gpd.GeoDataFrame) -> float:\n    \"\"\"Calculate the duration of a walk. It is saved in a geodataframe as a collection of points and timestamps in the `geometry` and `t` columns. Use", "16.4_sanitized": "import geopandas as gpd\n\ndef walk_length(trip: gpd.GeoDataFrame) -> float:\n    \"\"\"Calculate the length of a walk. It is saved in a geodataframe as a collection of points and timestamps in the `geometry` and `t` columns. Use the `movingpandas` library.\"\"\"\n    import movingpandas as mp\n    return mp.distance(trip.geometry, t=trip.t).sum()\n", "16.6_prompt": "def walk_length(trip: str) -> float:\n    \"\"\"Calculate the length of a walk. It is saved in a geojson as a collection of points and timestamps in the `geometry` and `t` columns. Use the `movingpandas` library.\"\"\"", "16.6_generated": "def walk_length(trip: str) -> float:\n    \"\"\"Calculate the length of a walk. It is saved in a geojson as a collection of points and timestamps in the `geometry` and `t` columns. Use the `movingpandas` library.\"\"\"\n    import movingpandas as mp\n    import pandas as pd\n    import geopandas as gpd\n    import numpy as np\n    import math\n\n    # Read the data\n    df = pd.read_csv(trip)\n\n    # Convert the data to a geojson\n    gdf = gpd.GeoDataFrame(df, geometry=gpd.points_from_xy(df.geometry.x, df.geometry.y))\n\n    # Calculate the length of the walk\n    length = gdf.geometry.total_length\n\n    return length\n\n\ndef walk_speed(trip: str) -> float:\n    \"\"\"Calculate the speed of a walk. It is saved in a geojson as a collection of points and timestamps in the `geometry` and `t` columns. Use the `movingpandas` library.\"\"\"", "16.6_sanitized": "def walk_length(trip: str) -> float:\n    \"\"\"Calculate the length of a walk. It is saved in a geojson as a collection of points and timestamps in the `geometry` and `t` columns. Use the `movingpandas` library.\"\"\"\n    import movingpandas as mp\n    import pandas as pd\n    import geopandas as gpd\n    import numpy as np\n    import math\n\n    # Read the data\n    df = pd.read_csv(trip)\n\n    # Convert the data to a geojson\n    gdf = gpd.GeoDataFrame(df, geometry=gpd.points_from_xy(df.geometry.x, df.geometry.y))\n\n    # Calculate the length of the walk\n    length = gdf.geometry.total_length\n\n    return length\n\n", "17.1_prompt": "import geopandas as gpd\n\ndef trajectory_duration(trajectory: gpd.GeoDataFrame) -> float:\n    \"\"\"Calculate the duration of a trajectory in seconds. It is saved in a geodataframe as a collection of points and timestamps in the `geometry` and `t` columns. Use the `movingpandas` library.\"\"\"", "17.1_generated": "import geopandas as gpd\n\ndef trajectory_duration(trajectory: gpd.GeoDataFrame) -> float:\n    \"\"\"Calculate the duration of a trajectory in seconds. It is saved in a geodataframe as a collection of points and timestamps in the `geometry` and `t` columns. Use the `movingpandas` library.\"\"\"\n    return trajectory.geometry.total_length / trajectory.t.iloc[-1]\n\n\ndef trajectory_speed(trajectory: gpd.GeoDataFrame) -> float:\n    \"\"\"Calculate the average speed of a trajectory in meters per second. It is saved in a geodataframe as a collection of points and timestamps in the `geometry` and `t` columns. Use the `movingpandas` library.\"\"\"\n    return trajectory.geometry.total_length / trajectory.t.iloc[-1]\n\n\ndef trajectory_distance(trajectory: gpd.GeoDataFrame) -> float:\n    \"\"\"Calculate the distance of a trajectory in meters. It is saved in a geodataframe as a collection of points and timestamps in the `geometry` and `t` columns. Use the `movingpandas", "17.1_sanitized": "import geopandas as gpd\n\ndef trajectory_duration(trajectory: gpd.GeoDataFrame) -> float:\n    \"\"\"Calculate the duration of a trajectory in seconds. It is saved in a geodataframe as a collection of points and timestamps in the `geometry` and `t` columns. Use the `movingpandas` library.\"\"\"\n    return trajectory.geometry.total_length / trajectory.t.iloc[-1]\n\n", "17.3_prompt": "def trajectory_duration(trajectory: str) -> float:\n    \"\"\"Calculate the duration of a trajectory in seconds. It is saved in a geojson as a collection of points and timestamps in the `geometry` and `t` columns. Use the `movingpandas` library.\"\"\"", "17.3_generated": "def trajectory_duration(trajectory: str) -> float:\n    \"\"\"Calculate the duration of a trajectory in seconds. It is saved in a geojson as a collection of points and timestamps in the `geometry` and `t` columns. Use the `movingpandas` library.\"\"\"\n    import movingpandas as mp\n    import pandas as pd\n    import geopandas as gpd\n\n    # Read the trajectory as a geojson\n    trajectory_geojson = gpd.read_file(trajectory)\n\n    # Convert the trajectory to a dataframe\n    trajectory_df = pd.DataFrame(trajectory_geojson.to_dict('records'))\n\n    # Calculate the duration of the trajectory\n    duration = mp.Duration(trajectory_df, 't', 'geometry').mean()\n\n    return duration", "17.3_sanitized": "def trajectory_duration(trajectory: str) -> float:\n    \"\"\"Calculate the duration of a trajectory in seconds. It is saved in a geojson as a collection of points and timestamps in the `geometry` and `t` columns. Use the `movingpandas` library.\"\"\"\n    import movingpandas as mp\n    import pandas as pd\n    import geopandas as gpd\n\n    # Read the trajectory as a geojson\n    trajectory_geojson = gpd.read_file(trajectory)\n\n    # Convert the trajectory to a dataframe\n    trajectory_df = pd.DataFrame(trajectory_geojson.to_dict('records'))\n\n    # Calculate the duration of the trajectory\n    duration = mp.Duration(trajectory_df, 't', 'geometry').mean()\n", "17.4_prompt": "import geopandas as gpd\n\ndef walk_duration(trip: gpd.GeoDataFrame) -> float:\n    \"\"\"Calculate the duration of a walk in seconds. It is saved in a geodataframe as a collection of points and timestamps in the `geometry` and `t` columns. Use the `movingpandas` library.\"\"\"", "17.4_generated": "import geopandas as gpd\n\ndef walk_duration(trip: gpd.GeoDataFrame) -> float:\n    \"\"\"Calculate the duration of a walk in seconds. It is saved in a geodataframe as a collection of points and timestamps in the `geometry` and `t` columns. Use the `movingpandas` library.\"\"\"\n    import movingpandas as mp\n    return mp.moving_duration(trip.geometry, trip.t).iloc[0]\n\ndef walk_distance(trip: gpd.GeoDataFrame) -> float:\n    \"\"\"Calculate the distance of a walk in meters. It is saved in a geodataframe as a collection of points and timestamps in the `geometry` and `t` columns. Use the `movingpandas` library.\"\"\"\n    import movingpandas as mp\n    return mp.moving_distance(trip.geometry, trip.t).iloc[0]\n\ndef walk_speed(trip: gpd.GeoDataFrame) -> float:\n    \"\"\"Calculate the speed of a walk in meters per second. It is saved in a geodataframe as a collection of points and timestamps in the `geometry` and", "17.4_sanitized": "import geopandas as gpd\n\ndef walk_duration(trip: gpd.GeoDataFrame) -> float:\n    \"\"\"Calculate the duration of a walk in seconds. It is saved in a geodataframe as a collection of points and timestamps in the `geometry` and `t` columns. Use the `movingpandas` library.\"\"\"\n    import movingpandas as mp\n    return mp.moving_duration(trip.geometry, trip.t).iloc[0]\n", "17.6_prompt": "def walk_duration(trip: str) -> float:\n    \"\"\"Calculate the duration of a walk in seconds. It is saved in a geojson as a collection of points and timestamps in the `geometry` and `t` columns. Use the `movingpandas` library.\"\"\"", "17.6_generated": "def walk_duration(trip: str) -> float:\n    \"\"\"Calculate the duration of a walk in seconds. It is saved in a geojson as a collection of points and timestamps in the `geometry` and `t` columns. Use the `movingpandas` library.\"\"\"\n    import movingpandas as mp\n    import pandas as pd\n    import geopandas as gpd\n    import numpy as np\n    import json\n    import os\n\n    # Read the geojson file\n    with open(trip, 'r') as f:\n        data = json.load(f)\n\n    # Convert the geojson to a pandas DataFrame\n    df = pd.DataFrame(data['features'])\n\n    # Convert the geometry column to a GeoDataFrame\n    gdf = gpd.GeoDataFrame(df, geometry='geometry')\n\n    # Convert the t column to a datetime index\n    gdf['t'] = pd.to_datetime(gdf['t'], unit='s')\n\n    # Calculate the duration of the walk\n    duration = (gdf['t'].max() - gdf['t'].min", "17.6_sanitized": "", "18.1_prompt": "import geopandas as gpd\n\ndef average_speed(trajectory: gpd.GeoDataFrame) -> float:\n    \"\"\"Calculate the average speed of a trajectory in meters per second. It is saved in a geodataframe as a collection of points and timestamps in the `geometry` and `t` columns. Use the `movingpandas` library.\"\"\"", "18.1_generated": "import geopandas as gpd\n\ndef average_speed(trajectory: gpd.GeoDataFrame) -> float:\n    \"\"\"Calculate the average speed of a trajectory in meters per second. It is saved in a geodataframe as a collection of points and timestamps in the `geometry` and `t` columns. Use the `movingpandas` library.\"\"\"\n    import movingpandas as mp\n    return mp.speed(trajectory, 'geometry', 't').mean()\n\ndef average_speed_per_hour(trajectory: gpd.GeoDataFrame) -> float:\n    \"\"\"Calculate the average speed of a trajectory in meters per second. It is saved in a geodataframe as a collection of points and timestamps in the `geometry` and `t` columns. Use the `movingpandas` library.\"\"\"\n    import movingpandas as mp\n    return mp.speed(trajectory, 'geometry', 't').mean()\n\ndef average_speed_per_hour(trajectory: gpd.GeoDataFrame) -> float:\n    \"\"\"Calculate the average speed of a trajectory in meters per second. It is saved in a geodataframe as a collection of points and timestamps", "18.1_sanitized": "import geopandas as gpd\n\ndef average_speed(trajectory: gpd.GeoDataFrame) -> float:\n    \"\"\"Calculate the average speed of a trajectory in meters per second. It is saved in a geodataframe as a collection of points and timestamps in the `geometry` and `t` columns. Use the `movingpandas` library.\"\"\"\n    import movingpandas as mp\n    return mp.speed(trajectory, 'geometry', 't').mean()\n", "18.3_prompt": "def average_speed(trajectory: str) -> float:\n    \"\"\"Calculate the average speed of a trajectory in meters per second. It is saved in a geojson as a collection of points and timestamps in the `geometry` and `t` columns. Use the `movingpandas` library.\"\"\"", "18.3_generated": "def average_speed(trajectory: str) -> float:\n    \"\"\"Calculate the average speed of a trajectory in meters per second. It is saved in a geojson as a collection of points and timestamps in the `geometry` and `t` columns. Use the `movingpandas` library.\"\"\"\n    import movingpandas as mp\n    import pandas as pd\n    import numpy as np\n\n    df = pd.read_csv(trajectory, sep=\"\\t\")\n    df[\"t\"] = pd.to_datetime(df[\"t\"])\n    df[\"t\"] = df[\"t\"].dt.total_seconds()\n    df[\"speed\"] = df[\"geometry\"].apply(lambda x: np.linalg.norm(x))\n    df[\"speed\"] = df[\"speed\"].apply(lambda x: x / df[\"t\"])\n    df[\"speed\"] = df[\"speed\"].apply(lambda x: x * 3600)\n    df[\"speed\"] = df[\"speed\"].apply(lambda x: x / 1000)\n    df[\"speed\"] = df[\"speed\"].apply(lambda x: round(x, 2))\n    df[\"speed", "18.3_sanitized": "", "18.4_prompt": "import geopandas as gpd\n\ndef average_walk_speed(trip: gpd.GeoDataFrame) -> float:\n    \"\"\"Calculate the average speed of a walk in meters per second. It is saved in a geodataframe as a collection of points and timestamps in the `geometry` and `t` columns. Use the `movingpandas` library.\"\"\"", "18.4_generated": "import geopandas as gpd\n\ndef average_walk_speed(trip: gpd.GeoDataFrame) -> float:\n    \"\"\"Calculate the average speed of a walk in meters per second. It is saved in a geodataframe as a collection of points and timestamps in the `geometry` and `t` columns. Use the `movingpandas` library.\"\"\"\n    import movingpandas as mp\n    return mp.speed(trip, 'geometry', 't').mean()\n\ndef average_walk_speed_by_day(trip: gpd.GeoDataFrame) -> float:\n    \"\"\"Calculate the average speed of a walk in meters per second. It is saved in a geodataframe as a collection of points and timestamps in the `geometry` and `t` columns. Use the `movingpandas` library.\"\"\"\n    import movingpandas as mp\n    return mp.speed(trip, 'geometry', 't').mean()\n\ndef average_walk_speed_by_day(trip: gpd.GeoDataFrame) -> float:\n    \"\"\"Calculate the average speed of a walk in meters per second. It is saved in a geodataframe as a collection of points and timestamps in the", "18.4_sanitized": "import geopandas as gpd\n\ndef average_walk_speed(trip: gpd.GeoDataFrame) -> float:\n    \"\"\"Calculate the average speed of a walk in meters per second. It is saved in a geodataframe as a collection of points and timestamps in the `geometry` and `t` columns. Use the `movingpandas` library.\"\"\"\n    import movingpandas as mp\n    return mp.speed(trip, 'geometry', 't').mean()\n", "18.6_prompt": "def average_walk_speed(trip: str) -> float:\n    \"\"\"Calculate the average speed of a walk in meters per second. It is saved in a geojson as a collection of points and timestamps in the `geometry` and `t` columns. Use the `movingpandas` library.\"\"\"", "18.6_generated": "def average_walk_speed(trip: str) -> float:\n    \"\"\"Calculate the average speed of a walk in meters per second. It is saved in a geojson as a collection of points and timestamps in the `geometry` and `t` columns. Use the `movingpandas` library.\"\"\"\n    import movingpandas as mp\n    import pandas as pd\n    import numpy as np\n\n    df = pd.read_csv(trip, sep=\"\\t\")\n    df[\"t\"] = pd.to_datetime(df[\"t\"])\n    df[\"t\"] = df[\"t\"].dt.total_seconds()\n    df[\"speed\"] = df[\"geometry\"].apply(lambda x: x.distance)\n    df[\"speed\"] = df[\"speed\"].apply(lambda x: x / (df[\"t\"] - df[\"t\"].shift(1)))\n    df[\"speed\"] = df[\"speed\"].apply(lambda x: x.m)\n    df[\"speed\"] = df[\"speed\"].apply(lambda x: x / 60)\n    df[\"speed\"] = df[\"speed\"].apply(lambda x: np.round(x, 2))\n    df[\"speed\"]", "18.6_sanitized": "", "19.1_prompt": "def geocode_city(city: str) -> Polygon:\n    \"\"\"Geocode a city to get its boundaries. Use the osmnx to perform geocoding.\"\"\"", "19.1_generated": "def geocode_city(city: str) -> Polygon:\n    \"\"\"Geocode a city to get its boundaries. Use the osmnx to perform geocoding.\"\"\"\n    # TODO: Implement this function.\n    # Hint: Use the osmnx.geocode_city() function.\n    # Hint: Use the osmnx.geocode_city() function.\n    # Hint: Use the osmnx.geocode_city() function.\n    # Hint: Use the osmnx.geocode_city() function.\n    # Hint: Use the osmnx.geocode_city() function.\n    # Hint: Use the osmnx.geocode_city() function.\n    # Hint: Use the osmnx.geocode_city() function.\n    # Hint: Use the osmnx.geocode_city() function.\n    # Hint: Use the osmnx.geocode_city() function.\n    # Hint: Use the osmnx", "19.1_sanitized": "", "20.1_prompt": "def geocode_city(city: str) -> Point:\n    \"\"\"Geocode a city ant get its center point. Use the osmnx to perform geocoding.\"\"\"", "20.1_generated": "def geocode_city(city: str) -> Point:\n    \"\"\"Geocode a city ant get its center point. Use the osmnx to perform geocoding.\"\"\"\n    g = osmnx.geocode_city(city)\n    return g.center\n\n\ndef geocode_point(point: Point) -> Point:\n    \"\"\"Geocode a point and get its center point. Use the osmnx to perform geocoding.\"\"\"\n    g = osmnx.geocode_point(point)\n    return g.center\n\n\ndef geocode_address(address: str) -> Point:\n    \"\"\"Geocode an address and get its center point. Use the osmnx to perform geocoding.\"\"\"\n    g = osmnx.geocode_address(address)\n    return g.center\n\n\ndef geocode_bbox(bbox: BBox) -> Point:\n    \"\"\"Geocode a bbox and get its center point. Use the osmnx to perform geocoding.\"\"\"\n    g =", "20.1_sanitized": "def geocode_city(city: str) -> Point:\n    \"\"\"Geocode a city ant get its center point. Use the osmnx to perform geocoding.\"\"\"\n    g = osmnx.geocode_city(city)\n    return g.center\n\n"}